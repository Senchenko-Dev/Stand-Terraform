- name: Recovery pg_probackup cfg
  block:

    - name: remove new PGARCLOGS dir
      file:
        path: "{{ PGBACKUP }}"
        state: absent

    - name: find old version PGARCLOGS dir
      find:
        paths: "/{{ PGBACKUP.split('/').1 }}"
        use_regex: yes
        patterns: "pgarclogs_old_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}_{{ ansible_date_time.minute }}"
        file_type: directory
      register: old_version_pgarclogs

    - name: remove dir with new archive data
      file:
        path: "{{ PGBACKUP_OLD }}"
        state: absent
      when: old_version_pgarclogs.matched == 1

    - name: recovery old PGARCLOGS dir
      shell: "mv {{ item.path }} {{ PGBACKUP_OLD }}"
      with_items:
        - "{{ old_version_pgarclogs.files }}"
      when: old_version_pgarclogs.matched == 1

    - debug:
        msg: "{{ update_control_msgs.update_component_src_fail }}"
      when: old_version_pgarclogs.matched > 1
      
  become: true
  become_user: postgres
  when: inventory_hostname != 'etcd'