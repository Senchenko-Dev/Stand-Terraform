- name: Check backup mode, lagging between nodes and maintenance mode of patroni
  import_tasks: control_pre_check.yml
  vars:
    _controlprecheck_is_db_and_patroni_started: true
    _controlprecheck_is_db_backup: true
    _controlprecheck_is_db_lagging: true
    _controlprecheck_is_maintenance_mode: true

- name: Check input variables
  block:

    - name: set error flag if selected database does not exist
      set_fact:
        control_error_flag: true
      when: selected_database is undefined or selected_extensions is undefined

    - name: check that parameters passed
      assert:
        that: selected_database is defined and selected_extensions is defined
        fail_msg: "{{ control_msgs.fails.sch_or_ext_is_not_defined }}"

  when: inventory_hostname == 'master'

- name: Define version of current python interpreter
  set_fact:
    previous_python_interpreter: "{{ ansible_python_interpreter }}"

- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

- name: Check that ext schema is exists
  block:

    - name: get list of schemas in user database
      postgresql_query:
        db: "{{ selected_database }}"
        port: "{{ ports.pg }}"
        query: SELECT nspname FROM pg_catalog.pg_namespace WHERE nspname !~ '^pg_' AND nspname <> 'information_schema' ORDER BY 1
      register: schemas_in_user_db

    - name: define variable for collecting schemas in user database
      set_fact:
        list_with_schemas_in_user_db: []

    - name: redefine variable with schemas in user database
      set_fact:
        list_with_schemas_in_user_db: "{{ list_with_schemas_in_user_db + [item.nspname] }}"
      loop: "{{ schemas_in_user_db.query_result }}"
      loop_control:
        label: "{{ item.nspname }}"

    - name: set error flag if ext schema does not exist
      set_fact:
        control_error_flag: true
      when: "'ext' not in list_with_schemas_in_user_db"

    - name: abort playbook uxecution if ext schema is not exists
      assert:
        that: "'ext' in list_with_schemas_in_user_db"
        fail_msg: "{{ control_msgs.fails.ext_schema_does_not_exist }}"

  rescue:

    - name: print variable with message
      debug:
        msg: "{{ control_msgs.fails.unexpected }}"
      run_once: true
      when: not control_error_flag

  always:

    - name: define version of current python interpreter
      set_fact:
        previous_python_interpreter: "{{ ansible_python_interpreter }}"

  become: true
  become_user: postgres
  environment:
    - PGHOST: "{{ ansible_fqdn }}"
    - PGSSLCERT: "{{ pg_certs.ssl_cert }}"
    - PGSSLKEY: "{{ pg_certs.ssl_key }}"
  when: inventory_hostname == 'master'

- name: Create setected extension in the selected database
  block:

    - name: set empty variables
      set_fact:
        list_with_installed_contrib_ext_before: []
        list_with_installed_contrib_ext_after: []
        list_with_already_installed_ext: []
        list_with_installed_selected_extension: []
        list_with_not_installed_extension: []
        result_msg: []

    - name: collect installed extensions in user database before scenario execution
      block:

        - name: get installed extensions from user database
          postgresql_query:
            db: "{{ selected_database }}"
            port: "{{ ports.pg }}"
            query: SELECT e.extname AS "name", e.extversion AS "version" FROM pg_extension e
          register: installed_contrib_ext

        - name: redefine list with installed extensions
          set_fact:
            list_with_installed_contrib_ext_before: "{{ list_with_installed_contrib_ext_before + [item.name] }}"
          loop: "{{ installed_contrib_ext.query_result }}"
          loop_control:
            label: "{{ item.name }}"

    - name: redefine the list with already installed extensions
      block:

        - name: redefine variable with already installed extensions
          set_fact:
            list_with_already_installed_ext: "{{ list_with_already_installed_ext + [item] }}"
          loop: "{{ selected_extensions }}"
          when: item in list_with_installed_contrib_ext_before

        - name: print message with already installed extensions
          debug:
            msg: "{% if list_with_already_installed_ext | length == 1 %}\
                  {{ control_name }}.WARNING__Расширение {{ list_with_already_installed_ext[0] }} уже установлено в базе данных__{{ control_name }}.WARNING\
                  {% elif list_with_already_installed_ext | length > 1 %}\
                  {{ control_name }}.WARNING__Расширения {{ list_with_already_installed_ext | join(', ') }} уже установлены в базе данных__{{ control_name }}.WARNING\
                  {% endif %}"
          when: list_with_already_installed_ext|length != 0

    - name: redefine the list with not installed extensions
      block:

        - name: redefine variable with not installed extensions
          set_fact:
            list_with_not_installed_extension: "{{ list_with_not_installed_extension + [item] }}"
          loop: "{{ selected_extensions }}"
          when: item in contrib_extensions.not_install_automated

        - name: print message with not installed extensions
          debug:
            msg: "{% if list_with_not_installed_extension | length == 1 %}\
                  {{ control_name }}.WARNING__Расширение {{ list_with_not_installed_extension[0] }} не будет установлено в базе данных__{{ control_name }}.WARNING\
                  {% elif list_with_not_installed_extension | length > 1 %}\
                  {{ control_name }}.WARNING__Расширения {{ list_with_not_installed_extension | join(', ') }} не будут установлены в базе данных__{{ control_name }}.WARNING\
                  {% endif %}"
          when: list_with_not_installed_extension|length != 0

    - name: install selected extensions
      block:

        - name: install extensions into ext schema
          postgresql_ext:
            name: "{{ item }}"
            db: "{{ selected_database }}"
            schema: ext
            port: "{{ ports.pg }}"
            cascade: true
          loop: "{{ selected_extensions }}"
          register: installed_ext_extensions
          when: item not in list_with_installed_contrib_ext_before and item not in contrib_extensions.pg_catalog and item not in contrib_extensions.not_install_automated

        - name: install extensions into pg_catalog schema
          postgresql_ext:
            name: "{{ item }}"
            db: "{{ selected_database }}"
            schema: pg_catalog
            port: "{{ ports.pg }}"
            cascade: true
          loop: "{{ selected_extensions }}"
          register: installed_pg_catalog_extensions
          when: item not in list_with_installed_contrib_ext_before and item in contrib_extensions.pg_catalog

        - name: redefine variable with installed extensions in ext schema after scenario execution
          set_fact:
            list_with_installed_selected_extension: "{{ list_with_installed_selected_extension + [ext.item] }}"
          loop: "{{ installed_ext_extensions.results }}"
          loop_control:
            loop_var: ext
          when: ext.changed and installed_ext_extensions | length > 0

        - name: redefine variable with installed extensions in pg_catalog schema after scenario execution
          set_fact:
            list_with_installed_selected_extension: "{{ list_with_installed_selected_extension + [ext.item] }}"
          loop: "{{ installed_pg_catalog_extensions.results }}"
          loop_control:
            loop_var: ext
          when: ext.changed and installed_pg_catalog_extensions | length > 0

        - name: get installed extensions from the selected database after scenario execution
          postgresql_query:
            db: "{{ selected_database }}"
            port: "{{ ports.pg }}"
            query: SELECT e.extname AS "name" FROM pg_extension e
          register: installed_contrib_ext

        - name: redefine variable with installed extensions after scenario execution
          set_fact:
            list_with_installed_contrib_ext_after: "{{ list_with_installed_contrib_ext_after + [item.name] }}"
          loop: "{{ installed_contrib_ext.query_result }}"
          loop_control:
            label: "{{ item.name }}"

        - name: define variable with list of successfully installed extensions
          set_fact:
            result_msg: "{{ result_msg + [item] }}"
          loop: "{{ list_with_installed_selected_extension }}"
          when: item in list_with_installed_contrib_ext_after

    - name: print message with installed extensions after scenario execution
      debug: 
        msg: "{% if result_msg | length == 1 %}{{ control_name }}.OK__Расширение {{ result_msg[0] }} успешно установлено в базе данных__{{ control_name }}.OK\
              {% elif result_msg | length > 1 %}{{ control_name }}.OK__Расширения {{ result_msg | join(', ') }} успешно установлены в базе данных__{{ control_name }}.OK\
              {% endif %}"
      when: result_msg | length > 0

  rescue:

    - name: print variable with message
      debug:
        msg: "{{ control_msgs.fails.unexpected }}"
      when: not control_error_flag

  always:

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ previous_python_interpreter }}'

  become: true
  become_user: postgres
  environment:
    - PGHOST: "{{ ansible_fqdn }}"
    - PGSSLCERT: "{{ pg_certs.ssl_cert }}"
    - PGSSLKEY: "{{ pg_certs.ssl_key }}"
  when: inventory_hostname == 'master' and not control_error_flag