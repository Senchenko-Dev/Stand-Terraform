- name: Run control_pre_check
  import_tasks: control_pre_check.yml
  vars:
    _controlprecheck_is_db_and_patroni_started: true
    _controlprecheck_is_db_backup: true
    _controlprecheck_is_db_lagging: true
    _controlprecheck_is_maintenance_mode: true

- name: Define version of current python interpreter
  set_fact:
    previous_python_interpreter: "{{ ansible_python_interpreter }}"

- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

- name: Run scouting users
  block:

    - name: define variable with message
      set_fact:
        scenario_error: false

    # Request a list of users with information about the password complexity that
    #   - have a login to the database
    #   - non-ldap users
    #   - belong to the as_TUZ role or do not belong to any role
    #   - non-technical users ('pgbouncer', 'masteromni', 'backup_user', 'auditor', 'pstgcmdb', 'postgres')
    - name: get a list of users
      postgresql_query:
        port: "{{ ports.pg }}"
        db: postgres
        query: "SELECT \
                 r.rolname, \
                 r.rolvaliduntil, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'check_syntax') as check_syntax, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'min_length') as min_length, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'alpha_numeric') as alpha_numeric, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'min_alpha_chars') as min_alpha_chars, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'min_special_chars') as min_special_chars, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'min_uppercase') as min_uppercase, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'min_lowercase') as min_lowercase, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'max_rpt_chars') as max_rpt_chars, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'use_password_strength_estimator') \
                 as use_password_strength_estimator, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'password_strength_estimator_score') \ 
                 as password_strength_estimator_score, \
                 (SELECT value FROM recognize_password_policy_detailed(r.rolname) WHERE policy_name = 'illegal_values') as illegal_values \
                FROM \
                 pg_catalog.pg_roles r \
                WHERE \
                 rolcanlogin = 't' AND \
                 (r.oid IN (SELECT m.member FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) WHERE b.rolname = 'as_TUZ') OR \
                 r.oid NOT IN (SELECT m.member FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid))) AND \
                 r.rolname NOT IN (SELECT unnest(string_to_array(array_to_string(array(SELECT distinct trim(both '{}' FROM user_name::text) \
                                   FROM pg_catalog.pg_hba_file_rules WHERE auth_method = 'ldap' AND user_name::text NOT LIKE '%{+%'), ','),','))) AND \
                 r.rolname NOT IN ('pgbouncer', 'masteromni', 'backup_user', 'auditor', 'pstgcmdb', 'postgres') \
                ORDER BY 1;"
      register: users_list
      run_once: true

    - name: get blocked users from the database
      postgresql_query:
        port: "{{ ports.pg }}"
        db: postgres
        query: "SELECT c.oid, c.rolname, pp.is_blocked \
                FROM pg_catalog.pp_password_detailed pp \
                JOIN pg_catalog.pg_roles c ON (pp.roloid=c.oid) \
                where c.rolname = '{{ item.rolname }}' AND pp.is_blocked = true;"
      with_items: "{{ users_list.query_result }}"
      register: blocked_users_query

    - name: create blocked_users variable on each node
      set_fact:
        blocked_users: []
        cacheable: yes

    - name: set variable blocked_users on each node
      set_fact:
        blocked_users: "{{ blocked_users + [item.query_result.0.rolname] }}"
        cacheable: yes
      with_items: "{{ blocked_users_query.results }}"
      when: item.query_result.0 is defined

    - name: create node_blocked_users_list variable for general list of blocked users
      set_fact:
        node_blocked_users_list: []

    - name: set node_blocked_users_list variable for general list of blocked users
      set_fact:
        node_blocked_users_list: "{{ node_blocked_users_list + [item] }}"
      with_items:
        - "{{ hostvars['master'].blocked_users }}"
        - "{% if installation_type == 'cluster' %}{{ hostvars['replica'].blocked_users }}{% endif %}"
      when: item not in node_blocked_users_list

    - name: print blocked/non-blocked users (for {{ control_name }})
      debug:
        msg: "{{ control_name }}.INFO__\
              {{ item.rolname }}|\
              {% if item.rolname in node_blocked_users_list %}True{% else %}False{% endif %}|\
              {{ item.rolvaliduntil }}|\
              {{ item.check_syntax }}|\
              {{ item.min_length }}|\
              {{ item.alpha_numeric }}|\
              {{ item.min_alpha_chars }}|\
              {{ item.min_special_chars }}|\
              {{ item.min_uppercase }}|\
              {{ item.min_lowercase }}|\
              {{ item.max_rpt_chars }}|\
              {{ item.use_password_strength_estimator }}|\
              {{ item.password_strength_estimator_score }}|\
              {{ item.illegal_values }}\
              __{{ control_name }}.INFO"
      with_items:
        - "{{ users_list.query_result }}"
      run_once: true

  rescue:

    - name: print variable with message
      debug:
        msg: "{{ control_msgs.fails.unexpected }}"
      run_once: true

    - name: redefine variable with scenario error
      set_fact:
        scenario_error: true

  always:

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ previous_python_interpreter }}'

    - name: check status scenario
      assert:
        that: not scenario_error
        fail_msg: "{{ control_msgs.fails.scenario }}"
      run_once: true

    - name: print result message
      debug:
        msg: "{{ control_msgs.ok.scouting_users }}"
      run_once: true
      when: not scenario_error

  environment:
    - PGHOST: "{{ ansible_fqdn }}"
    - PGSSLCERT: "{{ pg_certs.ssl_cert }}"
    - PGSSLKEY: "{{ pg_certs.ssl_key }}"
  become: true
  become_user: postgres