- name: Set default values for input variables of role
  block:

    - name: define inner _controlprecheck_is_db_backup variable
      set_fact:
        _controlprecheck_is_db_backup: false
      when: _controlprecheck_is_db_backup is undefined

    - name: define inner _controlprecheck_is_db_lagging variable
      set_fact:
        _controlprecheck_is_db_lagging: false
      when: _controlprecheck_is_db_lagging is undefined

    - name: define inner _controlprecheck_is_maintenance_mode variable
      set_fact:
        _controlprecheck_is_maintenance_mode: false
      when: _controlprecheck_is_maintenance_mode is undefined

    - name: define inner _controlprecheck_is_db_and_patroni_started
      set_fact:
        _controlprecheck_is_db_and_patroni_started: false
      when: _controlprecheck_is_db_and_patroni_started is undefined

    - name: define inner _controlprecheck_is_db_and_patroni_stopped
      set_fact:
        _controlprecheck_is_db_and_patroni_stopped: false
      when: _controlprecheck_is_db_and_patroni_stopped is undefined

- name: Define default value for variables check fail
  set_fact:
    check_fail_backup: false
    check_fail_lag: false
    check_fail_maintenance_mode: false

- name: Check that database and patroni is running
  block:

    - name: gather services facts
      service_facts:
      no_log: "{{ nolog }}"

    - name: check that postgresql is started
      shell: '{{ PGHOME }}/bin/pg_ctl status -D {{ PGDATA }}'
      register: database_started
      become_user: postgres
      become: true
      failed_when: database_started.rc != 3 and database_started.rc != 0

    - name: set some variables
      set_fact:
        database_started: "{% if 'server is running' in database_started.stdout %}true{% else %}false{% endif %}"
        patroni_started: "{% if 'patroni.service' in ansible_facts.services.keys() and ansible_facts.services['patroni.service'].state == 'running' %}true\
                          {% else %}false{% endif %}"

    - name: check database is running
      assert:
        that: "{{ database_started }} == True"
        fail_msg: "{{ control_msgs.fails.db_pgse_stopped }}"

    - name: check patroni is running
      assert:
        that: "{{ patroni_started }} == True"
        fail_msg: "{{ control_msgs.fails.patroni_stopped }}"
      when: patroni

  when: _controlprecheck_is_db_and_patroni_started

- name: Check that database and patroni is not running
  block:

    - name: gather services facts
      service_facts:
      no_log: "{{ nolog }}"

    - name: check that postgresql is stopped
      shell: '{{ PGHOME }}/bin/pg_ctl status -D {{ PGDATA }}'
      register: database_stopped
      failed_when: database_stopped.rc != 3 and database_stopped.rc != 0
      become_user: postgres

    - name: define variable with state of database
      set_fact:
        database_stopped: "{% if 'no server running' in database_stopped.stdout %}true{% else %}false{% endif %}"

    - name: define variable with state of patroni
      set_fact:
        patroni_stopped: "{% if ansible_facts.services['patroni.service'].state == 'stopped' %}true{% else %}false{% endif %}"
      when: patroni

    - name: check database is stopped
      assert:
        that: database_stopped
        fail_msg: "{{ control_msgs.fails.db_pgse_started }}"

    - name: check patroni is stopped
      assert:
        that: patroni_stopped
        fail_msg: "{{ control_msgs.fails.patroni_started }}"
      when: patroni

  when: _controlprecheck_is_db_and_patroni_stopped

- name: Check backup, maintenance mode and lag
  block:

    - name: Define version of current python interpreter
      set_fact:
        previous_python_interpreter: "{{ ansible_python_interpreter }}"

    - name: Set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

    - name: check db backup is running
      block:

        - name: check that backup in not running
          postgresql_query:
            port: "{{ ports.pg }}"
            db: postgres
            query: SELECT pg_is_in_backup();
          register: check_backup_is_running

        - name: check result check_fail_backup
          block:

            - name: define check_fail_backup
              set_fact:
                check_fail_backup: true

            - name: write to stdout status control_msgs.fails.lag
              debug:
                msg: "{{ control_msgs.fails.backup }}"

          when: check_backup_is_running.query_result.0.pg_is_in_backup

      when: _controlprecheck_is_db_backup

    - name: сheck lagging between nodes of cluster and redefine variable with lag status
      block:

        - name: define roles of nodes
          include_role:
            name: patroni
            tasks_from: update_define_roles_of_nodes.yml

        - name: check that lag equal null
          uri:
            url: "http://{{ ansible_fqdn }}:{{ ports.patroni }}/cluster"
            return_content: yes
          register: cluster_status
          until: current_replica | define_lag(cluster_status.json.members) == 0
          retries: 6
          delay: "{{ patroni_wait_seconds }}"

      rescue:

        - name: define check_fail_lag
          set_fact:
            check_fail_lag: true

        - name: write to stdout status control_msgs.fails.lag
          debug:
            msg: "{{ control_msgs.fails.lag }}"

      when: installation_type == 'cluster' and _controlprecheck_is_db_lagging

    - name: check whether maintenance mode is enabled in the cluster
      block:

        - name: get status of cluster
          uri:
            url: "http://{{ ansible_fqdn }}:{{ ports.patroni }}/config"
            return_content: yes
          register: json_content

        - name: define check_key_pause
          set_fact:
            check_key_pause: "{% if 'pause' in json_content.json.keys() %}{{ json_content.json.pause }}{% else %}false{% endif %}"

        - name: check result check_fail_maintenance_mode
          block:

            - name: define check_fail_maintenance_mode
              set_fact:
                check_fail_maintenance_mode: true

            - name: write to stdout status control_msgs.fails.maintenance_mode
              debug:
                msg: "{{ control_msgs.fails.maintenance_mode }}"

          when: check_key_pause

      when: patroni and _controlprecheck_is_maintenance_mode
      run_once: true

  rescue:

    - name: print variable with message
      debug:
        msg: "{{ control_msgs.fails.unexpected }}"
      run_once: true

  always:

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ previous_python_interpreter }}'

  environment:
    - PGHOST: "{{ ansible_fqdn }}"
    - PGSSLCERT: "{{ pg_certs.ssl_cert }}"
    - PGSSLKEY: "{{ pg_certs.ssl_key }}"
  become: true
  become_user: postgres

- name: Check fail
  assert:
    that: "{{ check_object.value }} == False"
    fail_msg: "Не прошел проверку {{ check_object.parameter }} = {{ check_object.value }}"
  loop:
    - { parameter: 'check_fail_backup', value: '{{ check_fail_backup }}' }
    - { parameter: 'check_fail_lag', value: '{{ check_fail_lag }}' }
    - { parameter: 'check_fail_maintenance_mode', value: '{{ check_fail_maintenance_mode }}' }
  loop_control:
    loop_var: check_object