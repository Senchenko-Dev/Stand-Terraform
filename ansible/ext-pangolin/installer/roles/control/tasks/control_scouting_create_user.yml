- name: Run control_pre_check
  import_tasks: control_pre_check.yml
  vars:
    _controlprecheck_is_db_and_patroni_started: true
    _controlprecheck_is_db_backup: true
    _controlprecheck_is_db_lagging: true
    _controlprecheck_is_maintenance_mode: true

- name: Define roles of nodes
  include_role:
    name: patroni
    tasks_from: update_define_roles_of_nodes.yml

- name: Run scouting users
  block:

    - name: define variable with message
      set_fact:
        scenario_error: false

    - name: define version of current python interpreter
      set_fact:
        previous_python_interpreter: "{{ ansible_python_interpreter }}"

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

    # Request usernames
    #   - have a login to the database
    #   - belong to the as_TUZ, as_admin, as_admin_read role or do not belong to any role
    #   - non-technical users
    - name: get a list of users
      postgresql_query:
        port: "{{ ports.pg }}"
        db: postgres
        query: "SELECT r.rolname FROM pg_catalog.pg_roles r \
                WHERE \
                 rolcanlogin = 't' AND \
                 (r.oid IN (SELECT m.member FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid) \
                            WHERE b.rolname in ('as_TUZ','as_admin','as_admin_read')) OR \
                 r.oid NOT IN (SELECT m.member FROM pg_catalog.pg_auth_members m JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid))) AND \
                 r.rolname NOT IN ('pgbouncer', 'masteromni', 'backup_user', 'auditor', 'pstgcmdb', 'postgres', 'cron', 'patroni') \
                ORDER BY 1"
      register: users_list

    - name: print current users (for {{ control_name }})
      debug:
        msg: "{{ control_name }}.USER__{{ item.rolname }}__{{ control_name }}.USER"
      with_items:
        - "{{ users_list.query_result }}"

    - name: get a list of parameters for the as_TUZ group role
      postgresql_query:
        port: "{{ ports.pg }}"
        db: postgres
        query: "SELECT \
                 rolname, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'check_syntax') as check_syntax, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'min_length') as min_length, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'alpha_numeric') as alpha_numeric, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'min_alpha_chars') as min_alpha_chars, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'min_special_chars') as min_special_chars, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'min_uppercase') as min_uppercase, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'min_lowercase') as min_lowercase, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'max_rpt_chars') as max_rpt_chars, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'use_password_strength_estimator') \
                 as use_password_strength_estimator, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'password_strength_estimator_score') \
                 as password_strength_estimator_score, \
                 (SELECT value FROM recognize_password_policy_detailed(rolname) WHERE policy_name = 'illegal_values') as illegal_values \
                FROM \
                 pg_catalog.pg_roles \
                WHERE \
                 rolname = 'as_TUZ' \
                ORDER BY 1"
      register: roles_list

    - name: print roles with parameters (for {{ control_name }})
      debug:
        msg: "{{ control_name }}.ROLE__\
              {{ item.rolname }}|\
              {{ item.check_syntax }}|\
              {{ item.min_length }}|\
              {{ item.alpha_numeric }}|\
              {{ item.min_alpha_chars }}|\
              {{ item.min_special_chars }}|\
              {{ item.min_uppercase }}|\
              {{ item.min_lowercase }}|\
              {{ item.max_rpt_chars }}|\
              {{ item.use_password_strength_estimator }}|\
              {{ item.password_strength_estimator_score }}|\
              {{ item.illegal_values }}\
              __{{ control_name }}.ROLE"
      with_items:
        - "{{ roles_list.query_result }}"

  rescue:

    - name: print variable with message
      debug:
        msg: "{{ control_msgs.fails.unexpected }}"

    - name: redefine variable with scenario error
      set_fact:
        scenario_error: true

  always:

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ previous_python_interpreter }}'

    - name: check status scenario
      assert:
        that: not scenario_error
        fail_msg: "{{ control_msgs.fails.scenario }}"

    - name: print result message
      debug:
        msg: "{{ control_msgs.ok.scouting_users }}"
      when: not scenario_error

  environment:
    - PGHOST: "{{ ansible_fqdn }}"
    - PGSSLCERT: "{{ pg_certs.ssl_cert }}"
    - PGSSLKEY: "{{ pg_certs.ssl_key }}"
  become: true
  become_user: postgres
  when: ansible_fqdn == current_master