- name: Check rlm_data input parameter
  assert:
    that: rlm_data.payload is defined
    fail_msg: "{{ control_msgs.fails.rlm_data_not_exists }}"
  run_once: true

- name: Check roltype
  assert:
    that: rlm_data.payload.roltype in ['as_TUZ','as_admin','as_admin_read']
    fail_msg: "{{ control_msgs.fails.role_type }}"
  run_once: true

- name: Run control_pre_check
  import_tasks: control_pre_check.yml
  vars:
    _controlprecheck_is_db_and_patroni_started: true
    _controlprecheck_is_db_backup: true
    _controlprecheck_is_db_lagging: true
    _controlprecheck_is_maintenance_mode: true

- name: Define roles of nodes
  include_role:
    name: patroni
    tasks_from: update_define_roles_of_nodes.yml

- name: Create user
  block:

    - name: define variable with scenario error
      set_fact:
        scenario_error: false

    - name: set common role facts
      set_fact:
        role_conn_limit: 5
        noinherit_role_attr: 'NOINHERIT'
        inherit_role_attr: 'INHERIT'

    - name: define version of current python interpreter
      set_fact:
        previous_python_interpreter: "{{ ansible_python_interpreter }}"

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

    - name: request exist {{ rlm_data.payload.rolname }} role
      postgresql_query:
          port: "{{ ports.pg }}"
          query: SELECT pg_roles.rolname FROM pg_roles WHERE rolname='{{ rlm_data.payload.rolname }}'
      register: is_role

    - name: check exist {{ rlm_data.payload.rolname }} roles
      assert:
        that: is_role.rowcount|int == 0
        fail_msg: "{{ control_msgs.fails.create_user_exist }}"
      register: is_assert

    - name: create new user {{ rlm_data.payload.rolname }} if roltype as_TUZ
      block:

        - name: request create new user {{ rlm_data.payload.rolname }}
          postgresql_user:
            groups: as_TUZ
            port: "{{ ports.pg }}"
            name: "{{ rlm_data.payload.rolname }}"
            password: "{{ rlm_data.payload.rolpass }}"
            role_attr_flags: "{{ inherit_role_attr }}"
          failed_when: false
          register: request_create_user
          no_log: "{{ nolog }}"

        - name: check error message
          assert:
            that: request_create_user.changed
            fail_msg: "{{ control_msgs.fails.create_user_error | \
                          replace('_msg',request_create_user.exception.split('InternalError_:')[1] | trim | replace('\"','')) }}"
          when: not request_create_user.changed
          register: is_assert

      when: rlm_data.payload.roltype == 'as_TUZ'

    - name: create new user {{ rlm_data.payload.rolname }} if roltype as_admin
      block:

        - name: request create new user {{ rlm_data.payload.rolname }}
          postgresql_user:
            groups: "{% if rlm_data.payload.rolname | regex_search('^all-sa-pga[0-9]{5}$', ignorecase=true) %}\
                        {% if stand == 'dev' %}\
                          {{ as_group }},{{ db_admin }},all-sa-pam-group\
                        {% else %}\
                          {{ as_group }},all-sa-pam-group\
                        {% endif %}\
                     {% else %}\
                        {% if stand == 'dev' %}\
                          {{ as_group }},{{ db_admin }}\
                        {% else %}\
                          {{ as_group }}\
                        {% endif %}\
                     {% endif %}"
            port: "{{ ports.pg }}"
            name: "{{ rlm_data.payload.rolname }}"
            expires: "{{ ROLES_EXPIRES_DATE }}"
            conn_limit: "{{ role_conn_limit }}"
            role_attr_flags: "{{ noinherit_role_attr }}"

        - name: configure {{ rlm_data.payload.rolname }} role with default set_role
          postgresql_query:
            port: "{{ ports.pg }}"
            query: ALTER ROLE "{{ rlm_data.payload.rolname }}" SET ROLE "{{ as_group }}"

      when: rlm_data.payload.roltype == 'as_admin'

    - name: request create new user {{ rlm_data.payload.rolname }} if roltype as_admin_read
      postgresql_user:
        groups: "{% if rlm_data.payload.rolname | regex_search('^all-sa-pgu[0-9]{5}$', ignorecase=true) %}\
                    as_admin_read,all-sa-pam-group\
                 {% else %}\
                    as_admin_read\
                 {% endif %}"
        port: "{{ ports.pg }}"
        name: "{{ rlm_data.payload.rolname }}"
        expires: "{{ ROLES_EXPIRES_DATE }}"
        conn_limit: "{{ role_conn_limit }}"
        role_attr_flags: "{{ noinherit_role_attr }}"
      when: rlm_data.payload.roltype == 'as_admin_read'

  rescue:

    - name: print message when handling unknown error
      debug:
        msg: "{{ control_msgs.fails.unexpected }}"
      when: is_assert.msg is undefined

    - name: redefine variable with scenario error
      set_fact:
        scenario_error: true

  always:

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ previous_python_interpreter }}'

    - name: print result message
      debug:
        msg: "{% if rlm_data.payload.roltype == 'as_TUZ' %}\
                {{ control_msgs.ok.create_user }}\
              {% else %}\
                {{ control_msgs.ok.create_user_ldap }}\
              {% endif %}"
      when: not scenario_error

  environment:
    - PGHOST: "{{ ansible_fqdn }}"
    - PGSSLCERT: "{{ pg_certs.ssl_cert }}"
    - PGSSLKEY: "{{ pg_certs.ssl_key }}"
  become: true
  become_user: postgres
  when: ansible_fqdn == current_master