- name: Check passed action type
  assert:
    that: action_type in supported_action_types.control
    fail_msg: "Action {{ action_type }} doesn't exist in control actions"
  run_once: true

- name: Clear remote tmp directory
  file:
    path: "{{ REMOTE_TMP }}"
    state: absent
  become: true

- name: Create remote tmp directory
  file:
    path: "{{ REMOTE_TMP }}"
    state: directory
    mode: '0777'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    recurse: yes
  become: true

- name: Prepare stage for control action
  block:

    - name: gather packages info
      package_facts:
        manager: "auto"
      no_log: "{{ nolog }}"

    - name: get current PG SE version
      set_fact:
        pg_current_version: "{{ ansible_facts.packages['postgresql-sber-edition'][0].version }}"
      when: "'postgresql-sber-edition' in ansible_facts.packages"

    - name: define some variables
      set_fact:
        pg_version: "{{ pg_current_version }}"
        pg_major_version: "{{ pg_current_version.split('.').0 }}"

    - name: check and use custom_config
      include_role:
        name: checkup
        tasks_from: check_and_use_custom_config

    - name: include control variables
      include_vars:
        file: "group_vars/control.yml"
      no_log: "{{ nolog }}"

    - name: create tmp python venv
      set_fact:
        python: "{{ python|combine(data, recursive=True) }}"
      vars:
        data:
          postgresql_venv: "{{ REMOTE_TMP }}/postgresql_venv"

    - name: include task file for install python venv for ansible use
      include_role:
        name: checkup
        tasks_from: python_env

    - name: include prepare update
      include_role:
        name: checkup
        tasks_from: prepare_update

- name: Redefine PGPORT, PGHOME, PGDATA
  include_role:
    name: checkup
    tasks_from: redefine_variables
  vars:
    _redefinevars_pgport: "{{ PGPORT_OLD }}"
    _redefinevars_pghome: "{{ PGHOME_OLD }}"
    _redefinevars_pgdata: "{{ PGDATA_OLD }}"

- name: Start scenario switchover
  import_tasks: control_switchover.yml
  when: action_type == 'switchover'

- name: Start scenario stop database
  import_tasks: control_stop_database.yml
  when: action_type == 'stop_database'

- name: Start scenario start database
  import_tasks: control_start_database.yml
  when: action_type == 'start_database'

- name: Start scenario scouting_users
  import_tasks: control_scouting_users.yml
  when: action_type == 'scouting_users'

- name: Start scenario unlock_reset_user
  import_tasks: control_unlock_reset_user.yml
  when: action_type == 'unlock_reset_user'

- name: Start scenario scouting_create_user
  import_tasks: control_scouting_create_user.yml
  when: action_type == 'scouting_create_user'

- name: Start scenario create_user
  import_tasks: control_create_user.yml
  when: action_type == 'create_user'

- name: Start scenario get installed contrib extensions
  import_tasks: control_get_installed_contrib_ext.yml
  when: action_type == 'get_installed_contrib_ext'

- name: Start scenario install contrib extensions
  import_tasks: control_install_contrib_ext.yml
  when: action_type == 'install_contrib_ext'
  
- name: Start scenario scouting_pgbouncer
  import_tasks: control_scouting_pgbouncer.yml
  when: action_type == 'scouting_pgbouncer'

- name: Start scenario tunning_pgbouncer
  import_tasks: control_tunning_pgbouncer.yml
  when: action_type == 'tunning_pgbouncer'

- name: Start scenario scout edit pg_hba
  import_tasks: scout_edit_pg_hba.yml
  when: action_type == 'scout_edit_pg_hba'

- name: Start scenario edit pg_hba
  import_tasks: edit_pg_hba.yml
  when: action_type == 'edit_pg_hba'

- name: Clear remote tmp directory
  file:
    path: "{{ REMOTE_TMP }}"
    state: absent
  become: true