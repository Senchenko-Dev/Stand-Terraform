- name: Check rlm_data input parameter
  assert:
    that: rlm_data.payload.pgbouncer_params is defined
    fail_msg: "{{ control_msgs.fails.rlm_data_not_exists }}"
  run_once: true

- name: Check running pgbouncer
  block:
    
    - name: gather services facts
      service_facts:
      no_log: "{{ nolog }}"

    - name: check pgbouncer service
      set_fact:
        scenario_error_stopped: True
      when: ansible_facts.services['pgbouncer.service'].state != 'running'
    
    - name: update error
      set_fact:
        scenario_error_stopped: "{{ [ hostvars.replica.scenario_error_stopped, hostvars.master.scenario_error_stopped ] | bcompare('OR') }}"
      when: installation_type == 'cluster'

    - name: check stopped pgbouncer
      assert:
        that: not scenario_error_stopped
        fail_msg: "{{ control_msgs.fails.stopped_pgbouncer }}"
      run_once: true

- name: Check rlm_data valid value for params wihtout recommend
  block:

    - name: create list params for checking
      set_fact:
        need_check: []

    - name: formed list params for checking 
      set_fact: 
        need_check: '{{ need_check + [ item ] }}'
      with_items: "{{ rlm_data.payload.pgbouncer_params }}"
      when: item.param_name in pgbouncer_parameters.need_valid.keys()

    - name: check valid data in payload
      assert:
        that: item.new_param|lower in pgbouncer_parameters.need_valid[ item.param_name ]
        fail_msg: "{{ control_msgs.fails.validation_error | \
                          replace('_param_name',item.param_name) | \
                          replace('_list_params', pgbouncer_parameters.need_valid[ item.param_name ] | join(',')) }}"
      with_items: "{{ need_check }}"
      run_once: true

- name: Run control_pre_check
  import_tasks: control_pre_check.yml
  vars:
    _controlprecheck_is_db_and_patroni_started: true
    _controlprecheck_is_db_backup: true
    _controlprecheck_is_db_lagging: true
    _controlprecheck_is_maintenance_mode: true
  
- name: Define version of current python interpreter
  set_fact:
    previous_python_interpreter: "{{ ansible_python_interpreter }}"

- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

- name: Create backup pgbouncer
  block:
    
    - name: define confd on stand
      set_fact:
        with_confd: False
    
    - name: define confd on stand
      set_fact:
        with_confd: True
      when: confd_exists.stat.exists

    - name: backup configs
      file:
        path: "{{ item.dir }}"
        state: "{{ item.state }}"
        owner: postgres
        group: postgres
        mode: 0700
      with_items:
        - { dir: "{{ backup.pgbouncer }}",                                     state: absent }
        - { dir: "{% if with_confd %}{{ backup.pgbouncer }}{{ confd_files.conf_dir }}/templates{% else %}\
          {{ backup.pgbouncer }}{{ pgbouncer_files.conf_dir }}{% endif %}", state: directory }
        - { dir: "{{ backup.pgbouncer }}{{ pgbouncer_files.conf_dir }}",    state: directory }

    - name: backup pgbouncer configs into confd
      copy:
        src: "{{ confd_files.conf_dir }}/templates/pgbouncer.tmpl"
        dest: "{{ backup.pgbouncer }}{{ confd_files.conf_dir }}/templates/pgbouncer.tmpl"
        owner: postgres
        group: postgres
        mode: 0600
        remote_src: true
      when: with_confd

    - name: backup pgbouncer configs without confd
      copy:
        src: "{{ pgbouncer_files.conf_dir }}/pgbouncer.ini"
        dest: "{{ backup.pgbouncer }}{{ pgbouncer_files.conf_dir }}/pgbouncer.ini"
        owner: postgres
        group: postgres
        mode: 0600
        remote_src: true

    - name: get file confd backup
      stat: path="{{ backup.pgbouncer }}{{ confd_files.conf_dir }}/templates/pgbouncer.tmpl"
      register: confd_backup_exists
      when: with_confd

    - name: get file pgbouncer backup
      stat: path="{{ backup.pgbouncer }}{{ pgbouncer_files.conf_dir }}/pgbouncer.ini"
      register: pgbouncer_backup_exists

    - name: check backup file exist
      assert:
        that: "pgbouncer_backup_exists.stat.exists"
        fail_msg: "{{ control_msgs.fails.backup_fail }}"

    - name: check backup file exist
      assert:
        that: "confd_backup_exists.stat.exists"
        fail_msg: "{{ control_msgs.fails.backup_fail }}"
      when: with_confd

  become: true
  when: inventory_hostname != 'etcd'

- name: Change pgBouncer parameters from payload
  block:

    - name: define scenario error
      set_fact:
        scenario_error: True
    
    - name: define compare error
      set_fact:
        compare_error: False
    
    - name: gather services facts
      service_facts:
      no_log: "{{ nolog }}"
    
    - name: stop pgbouncer service
      service:
        name: pgbouncer
        state: stopped
      when: ansible_facts.services['pgbouncer.service'].state == 'running'

    - name: change parameters for pgbouncer
      lineinfile:
        path: "{% if with_confd %}{{ confd_files.conf_dir }}/templates/pgbouncer.tmpl{% else %}\
        {{ pgbouncer_files.conf_dir }}/pgbouncer.ini{% endif %}"
        insertafter: "[pgbouncer]"
        regexp: ".*{{ item.param_name }}.*"
        line: " {{ item.param_name  }} = {{ item.new_param | lower }}"
      with_items: "{{ rlm_data.payload.pgbouncer_params }}"

    - name: get pgbouncer from file
      reciter:
        src: "{% if with_confd %}{{ confd_files.conf_dir }}/templates/pgbouncer.tmpl{% else %}\
            {{ pgbouncer_files.conf_dir }}/pgbouncer.ini{% endif %}"
        action: get
        parameter: "{{ item.param_name }}"
      register: pgbouncer_param
      become_user: postgres
      with_items: "{{ rlm_data.payload.pgbouncer_params }}"

    - name: check new params
      set_fact:
        compare_error: True  
      with_items: "{{ pgbouncer_param.results }}"
      when: item.message != item.item.new_param| lower 

    - name: restart systemd and start service
      systemd:
        name: confd
        state: restarted
      when: with_confd
    
    - name: check confd service
      set_fact:
        scenario_error: False
      when: with_confd and ansible_facts.services['confd.service'].state == 'running' and not compare_error

    - name: restarted systemd and start service
      systemd:
        name: pgbouncer
        state: restarted
        daemon_reload: yes
        enabled: yes

    - name: wait when pgbouncer service to open the port
      wait_for:
        port: "{{ ports.pgbouncer }}"
        host: "{{ ansible_fqdn }}"
        state: started
        timeout: 10
        delay: 5

    - name: check pgbouncer service
      set_fact:
        scenario_error: False
      when: ansible_facts.services['pgbouncer.service'].state == 'running' and not compare_error
           
  rescue:

    - name: print message when handling unknown error
      block:

        - name: print variable with message
          debug:
            msg: "{{ control_msgs.fails.unexpected }}"
          run_once: True

        - name: redefine variable with scenario error
          set_fact:
            scenario_error: True
         
  always:

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ previous_python_interpreter }}'

    - name: update error
      set_fact:
        scenario_error: "{{ [ hostvars.replica.scenario_error, hostvars.master.scenario_error, 
                              hostvars.replica.compare_error, hostvars.master.compare_error ] | bcompare('OR') }}"
      when: installation_type == 'cluster'
      
    - name: revert config pgbouncer
      block:

        - name: gather services facts
          service_facts:
          no_log: "{{ nolog }}"

        - name: stop pgbouncer service
          service:
            name: pgbouncer
            state: stopped
          when: ansible_facts.services['pgbouncer.service'].state == 'running'

        - name: backup pgbouncer configs into confd
          copy:
            src: "{{ backup.pgbouncer }}{{ confd_files.conf_dir }}/templates/pgbouncer.tmpl"
            dest: "{{ confd_files.conf_dir }}/templates/pgbouncer.tmpl"
            owner: postgres
            group: postgres
            mode: 0600
            remote_src: true
          when: with_confd

        - name: restart systemd and start service
          systemd:
            name: confd
            state: restarted
          when: with_confd

        - name: backup pgbouncer configs without confd
          copy:
            src: "{{ backup.pgbouncer }}{{ pgbouncer_files.conf_dir }}/pgbouncer.ini"
            dest: "{{ pgbouncer_files.conf_dir }}/pgbouncer.ini"
            owner: postgres
            group: postgres
            mode: 0600
            remote_src: true
        
        - name: restarted systemd and start service
          systemd:
            name: pgbouncer
            state: restarted
            daemon_reload: yes
            enabled: yes

        - name: wait when pgbouncer service to open the port
          wait_for:
            port: "{{ ports.pgbouncer }}"
            host: "{{ ansible_fqdn }}"
            state: started
            timeout: 10
            delay: 5
        
      when: scenario_error
    
    - name: drop backup configs
      file:
        path: "{{ item.dir }}"
        state: "{{ item.state }}"
        owner: postgres
        group: postgres
        mode: 0700
      with_items:
        - { dir: "{{ backup.pgbouncer }}", state: absent }

    - name: check status scenario
      assert:
        that: not scenario_error
        fail_msg: "{{ control_msgs.fails.fail_tunning }}"
      run_once: true

    - name: print result message for standalone
      debug:
        msg: "{{ control_msgs.ok.tunning_pgbouncer }}"
      when: installation_type == 'standalone' and not scenario_error

    - name: print result message for cluster
      debug:
        msg: "{{ control_msgs.ok.tunning_pgbouncer }}"
      run_once: true
      when: "installation_type == 'cluster' \
            and not hostvars['master'].scenario_error \
            and not hostvars['replica'].scenario_error"

  become: true
  when: inventory_hostname != 'etcd'
  