- name: Run edit pg_hba scenario
  block:

    - name: define default variable with scenario error and default variable with scenario error into edit pg_hba
      set_fact:
        _ctrleditpghba_scenario_error: true
        _ctrleditpghba_scenario_error_into_edit_pg_hba: false
        cacheable: yes

    - name: run control_pre_check
      import_tasks: control_pre_check.yml
      vars:
        _controlprecheck_is_db_and_patroni_started: true
        _controlprecheck_is_db_backup: true
        _controlprecheck_is_db_lagging: true
        _controlprecheck_is_maintenance_mode: true

    - name: define version of current python interpreter
      set_fact:
        previous_python_interpreter: "{{ ansible_python_interpreter }}"

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

    - name: save edited_pg_hba_strings as string
      set_fact:
        edited_pg_hba_strings_str: "{{ edited_pg_hba_strings[0] }}"

    - name: set default output scout strings
      set_fact:
        _ctrleditpghba_allowed_users: ""

    - name: set input string of allowed users
      set_fact:
        _ctrleditpghba_allowed_users: "{{ item }},{{ _ctrleditpghba_allowed_users }}"
      loop: "{{ control_edit_pg_hba.allowed_users }}"

    - name: check input params, allowed users must be
      assert:
        that: "_ctrleditpghba_allowed_users|length > 0"
        fail_msg: "Input data is incorrect: allowed users is empty"
        success_msg: "Input data is correct"

    - name: check exists patroni and define usage config
      block:

        - name: check exists patroni
          stat: path="{{ PYTHON_VENV_OLD }}/bin/patroni"
          register: patroni_exists

        - name: use pg_hba.conf, if patroni not exists
          set_fact:
            _ctrleditpghba_pg_hba_file: "{{ PGDATA }}/pg_hba.conf"
          when: not patroni_exists.stat.exists

        - name: use postgres.yml, if patroni exists
          set_fact:
            _ctrleditpghba_pg_hba_file: "{{ patroni_files.conf_dir }}/postgres.yml"
          when: patroni_exists.stat.exists

    - name: backup pg_hba config and patroni configuration file
      block:

        - name: ensure {{ backup.patroni }} and {{ backup.postgresql }}
          file:
            path: "{{ item.src }}"
            state: "{{ item.state }}"
            owner: postgres
            group: postgres
            mode: 0700
          with_items:
            - { src: "{{ backup.patroni }}",                                   state: absent }
            - { src: "{{ backup.patroni }}{{ patroni_files.conf_dir }}",       state: directory }
            - { src: "{{ backup.postgresql }}",                                state: absent }
            - { src: "{{ backup.postgresql }}/{{ PGDATA_OLD }}",               state: directory }

        - name: backup patroni configuration file
          copy:
            src: "{{ patroni_files.conf_dir }}/postgres.yml"
            dest: "{{ backup.patroni }}{{ patroni_files.conf_dir }}/postgres.yml"
            remote_src: yes
            owner: postgres
            group: postgres
            mode: 0600
          when: patroni_exists.stat.exists

        - name: backup pg_hba.conf
          copy:
            src: "{{ PGDATA_OLD }}/pg_hba.conf"
            dest: "{{ backup.postgresql }}{{ PGDATA_OLD }}/pg_hba.conf"
            owner: postgres
            group: postgres
            remote_src: yes
            mode: 0600
        
    - name: edit pg_hba
      block:

        - name: reload pg_hba
          block:

            - name: send reload command to postgresql
              shell: "{{ PGHOME }}/bin/pg_ctl reload -D {{ PGDATA }}"
              when: not patroni_exists.stat.exists

            - name: send reload command to patroni
              include_role:
                name: patroni
                tasks_from: update_with_patronictl
              vars:
                endpoint_name: reload
              when: patroni_exists.stat.exists

            - name: wait reload pg_hba
              pause:
                seconds: 11

          run_once: true

        - name: get current log path
          reciter:
            src: "{{ PGDATA_OLD }}/postgresql.conf"
            action: get
            parameter: log_directory
          register: current_log_directory

        - name: get name of current postgresql log file
          shell: |
              set -o pipefail
              ls -Art {{ current_log_directory.message }} | grep postgresql.*.log$ | tail -n 1
          register: name_curr_pgse_log_file

        - name: check founded name of current postgresql log file
          assert:
            that: "'postgresql' in name_curr_pgse_log_file.stdout"
            fail_msg: "Log file is absient"
            success_msg: "Log file is OK"

        - name: get control time in log file for start search
          shell: |
              set -o pipefail
              tail -n 1 '{{ current_log_directory.message }}/{{ name_curr_pgse_log_file.stdout }}' | cut -d ' ' -f 1,2
          register: control_log_time

        - name: check founded control log time
          assert:
            that: "control_log_time.stdout|length > 0"
            fail_msg: "Control time didn't find from log file"
            success_msg: "Control time was found"

        - name: find error for last reload config command
          shell: grep '{{ control_log_time.stdout }}' -ir '{{ current_log_directory.message }}/{{ name_curr_pgse_log_file.stdout }}' -A 100
          register: reload_pghba_result

        - name: check founded error for last reload config command
          assert:
            that: "reload_pghba_result.stdout.find('pg_hba.conf was not reloaded') == -1"
            fail_msg: "Reload command for config don't work, scenario stopped"
            success_msg: "Reload command for config is success"

        - name: set error into edit pg_hba
          set_fact:
            _ctrleditpghba_scenario_error_into_edit_pg_hba: true
            cacheable: yes

        - name: replace pg_hba rule strings with {{ control_edit_pg_hba.allowed_users }}
          include_role:
            name: common
            tasks_from: use_auto_merge
          vars:
            _useamerge_old_cfg_file: "{{ _ctrleditpghba_pg_hba_file }}"
            _useamerge_new_cfg_file: "{{ edited_pg_hba_strings_str }}"
            _useamerge_result_cfg_file: "{{ _ctrleditpghba_pg_hba_file }}"
            _useamerge_pghba_mode: "replace_pg_hba"
            _useamerge_pghba_users: "{{ _ctrleditpghba_allowed_users }}"

        - name: reload pg_hba
          block:

            - name: send reload command to postgresql
              shell: "{{ PGHOME }}/bin/pg_ctl reload -D {{ PGDATA }}"
              when: not patroni_exists.stat.exists

            - name: send reload command to patroni
              include_role:
                name: patroni
                tasks_from: update_with_patronictl
              vars:
                endpoint_name: reload
              when: patroni_exists.stat.exists

            - name: wait reload pg_hba
              pause:
                seconds: 11

          run_once: true

        - name: find error for last reload config command
          shell: grep '{{ control_log_time.stdout }}' -ir '{{ current_log_directory.message }}/{{ name_curr_pgse_log_file.stdout }}' -A 100
          register: reload_pghba_result

        - name: check founded error for last reload config command
          assert:
            that: "reload_pghba_result.stdout.find('pg_hba.conf was not reloaded') == -1"
            fail_msg: "Reload command after edited don't work, scenario stopped"
            success_msg: "Reload command for config is success"
        
        - name: unset error into edit pg_hba
          set_fact:
            _ctrleditpghba_scenario_error_into_edit_pg_hba: false
            _ctrleditpghba_scenario_error: false
            cacheable: yes

  always:

    - name: sync error into edit pg_hba beetwen hosts
      set_fact:
        _ctrleditpghba_scenario_error: "{{ [ hostvars.replica._ctrleditpghba_scenario_error, hostvars.master._ctrleditpghba_scenario_error ] | bcompare('OR') }}"
        _ctrleditpghba_scenario_error_into_edit_pg_hba: "{{ [ hostvars.replica._ctrleditpghba_scenario_error_into_edit_pg_hba, hostvars.master._ctrleditpghba_scenario_error_into_edit_pg_hba ] | bcompare('OR') }}"
        cacheable: yes
      when: installation_type == 'cluster'

    - name: print variable with message
      debug:
        msg: "{{ control_msgs.fails.unexpected }}"
      run_once: true
      when: _ctrleditpghba_scenario_error

    - name: revert pg_hba
      block:

        - name: save error patroni configuration file and recovery old
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            remote_src: yes
            owner: postgres
            group: postgres
            mode: 0600
          with_items:
            - { src: "{{ patroni_files.conf_dir }}/postgres.yml",                     dest: "{{ backup.patroni }}{{ patroni_files.conf_dir }}/postgres_error.yml"}
            - { src: "{{ backup.patroni }}{{ patroni_files.conf_dir }}/postgres.yml", dest: "{{ patroni_files.conf_dir }}/postgres.yml"}
          when: patroni_exists.stat.exists

        - name: save error and backup pg_hba.conf
          copy:
            dest: "{{ item.dest }}"
            src: "{{ item.src }}"
            owner: postgres
            group: postgres
            remote_src: yes
            mode: 0600
          with_items:
            - { src: "{{ PGDATA_OLD }}/pg_hba.conf",                        dest: "{{ backup.postgresql }}{{ PGDATA_OLD }}/pg_hba_error.conf"}
            - { src: "{{ backup.postgresql }}{{ PGDATA_OLD }}/pg_hba.conf", dest: "{{ PGDATA_OLD }}/pg_hba.conf"}

        - name: reload pg_hba
          block:

            - name: send reload command to postgresql
              shell: "{{ PGHOME }}/bin/pg_ctl reload -D {{ PGDATA }}"
              when: not patroni_exists.stat.exists

            - name: send reload command to patroni
              include_role:
                name: patroni
                tasks_from: update_with_patronictl
              vars:
                endpoint_name: reload
              when: patroni_exists.stat.exists

            - name: wait reload pg_hba
              pause:
                seconds: 11

          run_once: true

      when: _ctrleditpghba_scenario_error_into_edit_pg_hba

    - name: print result message
      debug:
        msg: "{{ control_msgs.ok.edit_pg_hba }}"
      run_once: true
      when: not _ctrleditpghba_scenario_error

    - name: print result message
      debug:
        msg: "{{ control_msgs.fails.scenario }}"
      run_once: true
      when: _ctrleditpghba_scenario_error

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ previous_python_interpreter }}'

  environment:
    - PGHOST: "{{ ansible_fqdn }}"
    - PGSSLCERT: "{{ pg_certs.ssl_cert }}"
    - PGSSLKEY: "{{ pg_certs.ssl_key }}"
  become: true
  become_user: postgres
  when: "inventory_hostname != 'etcd'"