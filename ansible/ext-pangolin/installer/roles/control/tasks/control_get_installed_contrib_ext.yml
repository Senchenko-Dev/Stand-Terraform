- name: Check backup mode, lagging between nodes and maintenance mode of patroni
  import_tasks: control_pre_check.yml
  vars:
    _controlprecheck_is_db_and_patroni_started: true
    _controlprecheck_is_db_backup: true
    _controlprecheck_is_db_lagging: true
    _controlprecheck_is_maintenance_mode: true

- name: Check input variables
  block:

    - name: set error flag if selected database does not exist
      set_fact:
        control_error_flag: true
      when: selected_database is undefined

    - name: check that parameter passed
      assert:
        that: selected_database is defined
        fail_msg: "{{ control_msgs.fails.sch_or_ext_is_not_defined }}"

  when: inventory_hostname == 'master'

- name: Define version of current python interpreter
  set_fact:
    previous_python_interpreter: "{{ ansible_python_interpreter }}"

- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

- name: Get info from the selected database
  block:

    - name: get installed extensions from the selected database
      postgresql_query:
        db: "{{ selected_database }}"
        port: "{{ ports.pg }}"
        query: "SELECT e.extname AS \"name\", e.extversion AS \"version\", n.nspname AS \"schema\", c.description AS \"description\"
                FROM pg_catalog.pg_extension e LEFT JOIN pg_catalog.pg_namespace n ON n.oid = e.extnamespace LEFT JOIN pg_catalog.pg_description c \
                ON c.objoid = e.oid AND c.classoid = 'pg_catalog.pg_extension'::pg_catalog.regclass ORDER BY 1"
      register: installed_contrib_ext

    - name: get allowed extensions from contrib
      postgresql_query:
        db: "{{ selected_database }}"
        port: "{{ ports.pg }}"
        query: SELECT * FROM pg_available_extensions WHERE installed_version is NULL
      register: allowed_contrib_ext

    - name: print installed extensions
      debug:
        msg: '{{ control_name }}.EXT_INSTALLED__{{ "%s|%s|%s|%s" | format(item.name, item.version, item.schema, item.description) }}__{{ control_name }}.EXT_INSTALLED'
      loop: "{{ installed_contrib_ext.query_result }}"
      loop_control:
        label: "{{ item.name }}"

    - name: print extensions available for installation
      debug:
        msg: '{{ control_name }}.EXT_AVAIL__{{ "%s|%s|%s" | format(item.name, item.default_version, item.comment) }}__{{ control_name }}.EXT_AVAIL'
      loop: "{{ allowed_contrib_ext.query_result }}"
      loop_control:
        label: "{{ item.name }}"

  rescue:

    - name: print variable with message
      debug:
        msg: "{{ control_msgs.fails.unexpected }}"
      when: not control_error_flag

  always:

    - name: define version of current python interpreter
      set_fact:
        previous_python_interpreter: "{{ ansible_python_interpreter }}"

  become: true
  become_user: postgres
  environment:
    - PGHOST: "{{ ansible_fqdn }}"
    - PGSSLCERT: "{{ pg_certs.ssl_cert }}"
    - PGSSLKEY: "{{ pg_certs.ssl_key }}"
  when: inventory_hostname == 'master' and not control_error_flag