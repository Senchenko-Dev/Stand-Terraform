- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ python.global_bin_2 }}'

- name: Update haproxy
  block:

  - name: loop wait for haproxy started
    systemd:
      name: haproxy
    register: result
    until: result.status.ActiveState == 'active'
    retries: 6
    delay: 10

  - name: update haproxy service
    block:

      - name: stop HAProxy service
        service:
          name: haproxy
          state: stopped

      - name: loop wait for haproxy stopped
        systemd:
          name: haproxy
        register: result
        until: result.status.ActiveState != 'active'
        retries: 6
        delay: 10

      - name: remove HAProxy package
        yum:
          name: haproxy
          state: absent

      - name: install HAProxy service
        yum:
          name: haproxy-{{ versions.haproxy }}
          state: present

      - name: enable HAProxy service
        service:
          name: haproxy
          enabled: yes

      - name: just force systemd to reread configs (2.4 and above)
        systemd:
          daemon_reload: yes

      - name: create socket file
        file:
          path: "{{ haproxy_files.socket_dir }}/stats"
          state: touch

    become: true

  - debug: msg="{{ update_error_types_breakpoint_msg }}"
    when: is_recovery_test_mode and haproxy_error_um01m and inventory_hostname == 'master'
  - debug: msg="{{ update_error_types_breakpoint_msg }}"
    when: is_recovery_test_mode and haproxy_error_um01r and inventory_hostname == 'replica'

  - name: restart haproxy
    block:

      # - name: copy configuration file for HAProxy
      #   template:
      #     src: haproxy.cfg.j2
      #     dest: "{{ haproxy_files.conf_dir }}/haproxy.cfg"
      #     owner: postgres
      #     group: postgres
      #     mode: 0600

      - name: start/restart HAProxy service
        service:
          name: haproxy
          state: restarted
          daemon_reload: yes
          enabled: yes

      - name: loop wait for haproxy started
        systemd:
          name: haproxy
        register: result
        until: result.status.ActiveState == 'active'
        retries: 6
        delay: 10

    become: true

  rescue:

    - name: replica updated with error
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          aggregate: true
          hosts:
            replica: true
          components:
            haproxy: true
      run_once: true
      when: inventory_hostname == 'replica'

    - name: master updated with error
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          aggregate: true
          hosts:
            master: true
          components:
            haproxy: true
      run_once: true
      when: inventory_hostname == 'master'

  always:

  - name: Set python interpretator
    set_fact:
      ansible_python_interpreter: '{{ python.global_bin_2 }}'
