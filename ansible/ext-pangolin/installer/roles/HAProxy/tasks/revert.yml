- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ python.global_bin_2 }}'

- name: Get service_facts
  service_facts:
  no_log: "{{ nolog }}"

- name: Recovery old version of haproxy
  block:

    - name: recovery, if was deleted
      block:

        - name: stop service haproxy, if started
          systemd:
            name: haproxy
            state: stopped
            enabled: yes
            daemon_reload: yes
          when: ansible_facts.services['haproxy.service'].state == 'running'

        - name: check prev saved version of haproxy
          find:
            paths: "{{ backup.haproxy }}/"
            use_regex: no
            patterns: '*rpm'
          register: haproxy_distributive_exists

        - name: reinstall RHEL etcd
          block:

            - name: remove installed new haproxy
              yum:
                name: haproxy
                state: absent
              ignore_errors: yes

            - name: install prev haproxy rpm from a local file
              yum:
                name: "{{ haproxy_distributive_exists.files.0.path }}"
                state: present
              when: haproxy_distributive_exists.matched|int != 0

          when: ansible_os_family == 'RedHat'

        - name: install prev haproxy rpm from a local file
          shell: "apt-get {{ item }}"
          with_items:
            - remove -y haproxy
            - install -y {{ haproxy_distributive_exists.files.0.path }}
          when: ansible_os_family == 'Altlinux'

        - name: install prev haproxy rpm from repo
          include_role:
            name: common
            tasks_from: install_versioned_package
          vars:
            _install_versioned_package_name: haproxy
            _install_versioned_package_version: "{{ versions.haproxy }}"
          when: haproxy_distributive_exists.matched|int == 0

        - name: enable haproxy service
          service:
            name: haproxy
            enabled: yes

        - name: just force systemd to reread configs (2.4 and above)
          systemd:
            daemon_reload: yes

        - name: remove old haproxy directories and create new it
          file:
            path: "{{ item.src }}"
            state: "{{ item.state }}"
            owner: postgres
            group: postgres
            mode: '0750'
          with_items:
            - { src: "{{ haproxy_files.socket_dir }}/", state: "absent" }
            - { src: "{{ haproxy_files.conf_dir }}/",   state: "absent" }
            - { src: "{{ haproxy_files.socket_dir }}/", state: "directory" }
            - { src: "{{ haproxy_files.conf_dir }}/",   state: "directory" }

        - name: create socket file
          file:
            path: "{{ haproxy_files.socket_dir }}/stats"
            state: touch

    - name: recovery haproxy files
      copy:
        src: "{{ backup.haproxy }}{{ haproxy_files.conf_dir }}/haproxy.cfg"
        dest: "{{ haproxy_files.conf_dir }}/haproxy.cfg"
        remote_src: yes
        owner: postgres
        group: postgres
        mode: 0600  

    - name: start/restart haproxy service
      service:
        name: haproxy
        state: restarted
        
  become: true

- name: Loop wait for haproxy started
  systemd:
    name: haproxy
  register: result
  until: result.status.ActiveState == 'active'
  retries: 6
  delay: 10
  become: true