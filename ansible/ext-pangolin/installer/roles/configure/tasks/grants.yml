- name: Grants
  block:

    - name: import task for apply sql scripts
      import_tasks: update_apply_sql_scripts.yml
      vars:
        monitoring_php_script: true
      when: action_type == 'install' or ( [ pg_current_version, '4.4.0' ] | compare_pg_se_versions )|int == 0

    - name: tune technical roles
      postgresql_query:
        query: "{{ item }}"
        port: "{{ ports.pg }}"
      with_items:
        - COMMENT ON ROLE "zabbix_oasubd" IS 'zabbix_oasubd';
        - ALTER USER "zabbix_oasubd" SET default_transaction_read_only = on;
        - ALTER USER "zabbix_oasubd" WITH NOSUPERUSER connection LIMIT 10;
        - GRANT USAGE ON SCHEMA backup TO pg_monitor;
        - GRANT SELECT ON ALL TABLES IN SCHEMA backup TO pg_monitor;
        - GRANT pg_monitor, pg_read_all_settings, pg_read_all_stats TO "zabbix_oasubd";
        - GRANT EXECUTE ON FUNCTION pg_catalog.pg_ls_dir(text) TO "zabbix_oasubd";
#            - GRANT USAGE on SCHEMA squeeze TO "zabbix_oasubd" ;
#            - GRANT SELECT on ALL tables in schema squeeze TO "zabbix_oasubd" ;
        - COMMENT ON ROLE "monitoring_php" IS 'monitoring_php';
        - ALTER USER "monitoring_php" WITH nosuperuser CreateRole;
        - GRANT pg_monitor TO "monitoring_php";
        - GRANT pg_read_all_stats TO "monitoring_php";
        - GRANT pg_read_all_settings TO "monitoring_php";
        - GRANT pg_stat_scan_tables TO "monitoring_php";
        - GRANT pg_signal_backend TO "monitoring_php";
        - GRANT pg_read_server_files TO "monitoring_php";
        - GRANT pg_write_server_files TO "monitoring_php";
        - GRANT EXECUTE ON FUNCTION pg_catalog.pg_reload_conf TO "monitoring_php";
        #- GRANT EXECUTE ON FUNCTION get_role_passwd TO "monitoring_php";
        - GRANT EXECUTE ON FUNCTION pg_read_file(filename text) TO "monitoring_php";
        - GRANT EXECUTE ON FUNCTION pg_read_binary_file(filename text) TO "monitoring_php";
        - GRANT EXECUTE ON FUNCTION check_admin_protect_is_on TO "monitoring_php";
        - GRANT EXECUTE ON FUNCTION check_ldap_is_on TO "monitoring_php";
        - GRANT USAGE ON SCHEMA ext TO "monitoring_php";
        - ALTER USER "monitoring_php" WITH connection LIMIT 10;
        - COMMENT ON ROLE auditor IS 'ZNO39375262';
        - ALTER USER auditor SET default_transaction_read_only = on;
        - GRANT SELECT ON pg_catalog.pg_shadow TO auditor;

    - name: set search path for postgres
      postgresql_query:
        port: "{{ ports.pg }}"
        query: "{{ item }}"
      with_items:
  #TODO - GRANT SELECT ON PG_CATALOG.PG_SHADOW TO {{ sec_admin }};
        - ALTER ROLE postgres SET search_path TO public;

    - name: tune roles for "{{ as_group }}"
      postgresql_query:
        port: "{{ ports.pg }}"
        query: "{{ item }}"
      with_items:
        - GRANT CREATE ON TABLESPACE "{{ tablespace_name }}" TO "{{ as_group }}"
        - GRANT CREATE ON DATABASE "{{ db_name }}" TO "{{ as_group }}"
      when: "'update' not in action_type"

    - name: tune roles for schema public
      postgresql_query:
        port: "{{ ports.pg }}"
        db: "{{ item }}"
        query: REVOKE ALL ON SCHEMA public FROM public
      with_items:
        - postgres
        - template1
        - "{{ db_name }}"
      when: "'update' not in action_type"

    - name: add search_path
      include_role:
        name: configure
        tasks_from: search_path.yml
      vars:
        install_users: '{{ users_for.install }}'
        update_users:  '{{ users_for.updates }}'
      loop:
        - { install: "{{ as_admins }}", updates: "{{ as_group }}" }
        - { install: "{{ support }}",   updates: "{{ db_admin }}" }
        - { install: "{{ as_TUZ }}",    updates: "{{ TUZ_group }}" }
      loop_control:
        loop_var: users_for
    #- name: grant all privs on DB to as_admins
    #  postgresql_query:
    #    port: "{{ ports.pg }}"
    #    query: 'GRANT ALL PRIVILEGES ON DATABASE "{{ db_name }}" TO "{{ as_group }}";'
    #  when: "db_name|length > 0 and tablespace_name|length > 0"

    - name: grant privs to hint_plan
      postgresql_query:
        port: "{{ ports.pg }}"
        db: "{{ item.1.datname }}"
        query: "{{ item.0 }}"
      with_nested:
        - [ 'GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA hint_plan TO "{{ as_group }}"',
            'GRANT USAGE ON SCHEMA hint_plan TO "{{ TUZ_group }}"',
            'GRANT SELECT, INSERT, UPDATE, DELETE ON hint_plan.hints TO "{{ as_group }}"',
            'GRANT SELECT ON hint_plan.hints TO "{{ TUZ_group }}"' ]
        - "{{ current_dbs.query_result }}"

    - name: grant privs to outline
      postgresql_query:
        port: "{{ ports.pg }}"
        db: "{{ item.1.datname }}"
        query: "{{ item.0 }}"
      with_nested:
        - [ 'GRANT USAGE ON SCHEMA outline TO "{{ as_group }}"',
            'GRANT USAGE ON SCHEMA outline TO "{{ db_admin }}"',
            'GRANT USAGE ON SCHEMA outline TO "as_admin_read"',
            'GRANT SELECT, INSERT, UPDATE, DELETE ON outline.outlines TO "{{ as_group }}"',
            'GRANT SELECT, INSERT, UPDATE, DELETE ON outline.outlines TO "{{ db_admin }}"',
            'GRANT SELECT ON outline.outlines TO "as_admin_read"',
            'GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA outline TO "{{ as_group }}"',
            'GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA outline TO "{{ db_admin }}"',
            'GRANT EXECUTE ON FUNCTION outline.identify TO "as_admin_read"',
            'GRANT EXECUTE ON FUNCTION outline.get(bigint, text) TO "as_admin_read"',
            'GRANT EXECUTE ON FUNCTION outline.get(text, text) TO "as_admin_read"']
        - "{{ current_dbs.query_result }}"

    - name: grant privs to pg_nblocks
      postgresql_query:
        query: "{{ item.0 }} {% if pg_profile.is_enable %}profile_tuz,{% endif %}as_admin"
        db: "{{ item.1.datname }}"
        port: "{{ ports.pg }}"
      with_nested:
        - [ 'GRANT SELECT ON pg_nblocks TO',
          'GRANT EXECUTE ON FUNCTION get_nblocks TO',
          'GRANT EXECUTE ON FUNCTION get_nblocks_all TO' ]
        - "{{ current_dbs.query_result }}"

    - name: grant PAM roles
      postgresql_query:
        query: "{{ item }}"
        port: "{{ ports.pg }}"
      with_items:
        - GRANT PG_READ_ALL_SETTINGS TO "as_admin_read"
        - GRANT PG_READ_ALL_STATS TO "as_admin_read"
        - GRANT PG_STAT_SCAN_TABLES TO "as_admin_read"
        - GRANT PG_SIGNAL_BACKEND TO "as_admin_read"
        - GRANT PG_MONITOR TO "as_admin_read"
        - GRANT "all-sa-pam-group" TO "all-sa-pam19002"
        - GRANT "{{ db_admin }}" TO "all-sa-pam19002"
        - GRANT "all-sa-pam-group" TO "all-sa-pam19002_ro"
        - GRANT "as_admin_read" TO "all-sa-pam19002_ro"

    - name: grant pg_read_all_perfinsight
      postgresql_query:
        query: GRANT pg_read_all_perfinsight TO "as_admin", "as_admin_read"
        port: "{{ ports.pg }}"

    - name: alter privs on outline schema
      postgresql_query:
        port: "{{ ports.pg }}"
        db: "{{ item.1.datname }}"
        query: "{{ item.0 }}"
      with_nested:
        - [ 'REVOKE ALL ON SCHEMA outline FROM public',
            'ALTER DEFAULT PRIVILEGES IN SCHEMA outline GRANT EXECUTE ON FUNCTIONS TO "{{ as_group }}"' ]
        - "{{ current_dbs.query_result }}"

    - name: grant privs for install with new schema
      block:

      - name: tune PAM roles and as_admin_read
        postgresql_query:
          query: "{{ item }}"
          port: "{{ ports.pg }}"
          db: "{{ db_name }}"
        with_items:
          - ALTER ROLE "all-sa-pam19002_ro" SET SEARCH_PATH = "{{ schema_name }}";
          - GRANT CONNECT ON DATABASE "{{ db_name }}" TO "as_admin_read";
          - GRANT USAGE ON SCHEMA "{{ schema_name }}" TO "as_admin_read";
          - GRANT SELECT ON ALL TABLES IN SCHEMA "{{ schema_name }}" TO "as_admin_read";
          - GRANT USAGE ON ALL SEQUENCES IN SCHEMA "{{ schema_name }}" TO "as_admin_read";
          - GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA "{{ schema_name }}" TO "as_admin_read";
          - ALTER ROLE "as_admin_read" SET SEARCH_PATH = "{{ schema_name }}",ext;
          - GRANT "as_admin_read" TO "all-sa-pam19002_ro";

      - name: grant all privs on schema to {{ as_group }}
        postgresql_query:
          port: "{{ ports.pg }}"
          db: "{{ db_name }}"
          query: GRANT ALL PRIVILEGES ON SCHEMA "{{ schema_name }}" TO "{{ as_group }}"{% if stand == 'dev' %},"{{ db_admin }}"{% endif %}

      - name: grant USAGE on schema to {{ TUZ_group }}
        postgresql_query:
          port: "{{ ports.pg }}"
          db: "{{ db_name }}"
          query: GRANT USAGE ON SCHEMA "{{ schema_name }}" TO "{{ TUZ_group }}"

      - name: grant all privs on sequences, functions, routine, procedures
        postgresql_query:
          session_role: "{{ as_group }}"
          port: "{{ ports.pg }}"
          db: "{{ db_name }}"
          query: "{{ item }}"
        with_items:
          - GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA "{{ schema_name }}" TO "{{ as_group }}", "{{ TUZ_group }}"
          - GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA "{{ schema_name }}" TO "{{ as_group }}"
          - GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA "{{ schema_name }}" TO "{{ TUZ_group }}"
          - GRANT ALL PRIVILEGES ON ALL ROUTINES IN SCHEMA "{{ schema_name }}" TO "{{ as_group }}"
          - GRANT EXECUTE ON ALL ROUTINES IN SCHEMA "{{ schema_name }}" TO "{{ TUZ_group }}"
          - GRANT ALL PRIVILEGES ON ALL PROCEDURES IN SCHEMA "{{ schema_name }}" TO "{{ as_group }}"
          - GRANT EXECUTE ON ALL PROCEDURES IN SCHEMA "{{ schema_name }}" TO "{{ TUZ_group }}"

      - name: alter default privs on schema tables, sequences, functions, routine, types
        postgresql_query:
          session_role: "{{ as_group }}"
          port: "{{ ports.pg }}"
          db: "{{ db_name }}"
          query: "{{ item }}"
        with_items:
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT ALL PRIVILEGES ON TABLES TO "{{ as_group }}"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT SELECT, INSERT, UPDATE, DELETE, TRUNCATE ON TABLES TO "{{ TUZ_group }}"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT SELECT ON TABLES TO "as_admin_read"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT SELECT ON TABLES TO "all-sa-pam19002_ro"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT ALL PRIVILEGES ON SEQUENCES TO "{{ as_group }}", "{{ TUZ_group }}"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT USAGE ON SEQUENCES TO "as_admin_read"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT USAGE ON SEQUENCES TO "all-sa-pam19002_ro"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT ALL PRIVILEGES ON FUNCTIONS TO "{{ as_group }}"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT EXECUTE ON FUNCTIONS TO "{{ TUZ_group }}"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT EXECUTE ON FUNCTIONS TO "as_admin_read"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT EXECUTE ON FUNCTIONS TO "all-sa-pam19002_ro"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT ALL PRIVILEGES ON ROUTINES TO "{{ as_group }}"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT EXECUTE ON ROUTINES TO "{{ TUZ_group }}"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT ALL PRIVILEGES ON TYPES TO "{{ as_group }}"
          - ALTER DEFAULT PRIVILEGES IN SCHEMA "{{ schema_name }}" GRANT USAGE ON TYPES TO "{{ TUZ_group }}"

      when: "schema_status.changed"

  environment: "{{ db_connection_args }}"
  become: true
  become_user: postgres
  when: ansible_fqdn == current_master
