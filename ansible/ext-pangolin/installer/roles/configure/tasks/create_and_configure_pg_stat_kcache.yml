- name: Create and configure pg_stat_kcache extension
  block:

  - name: get schema if extension exist
    postgresql_query:
      query: SELECT nspname FROM pg_catalog.pg_extension ex JOIN pg_namespace ns ON ex.extnamespace = ns.oid WHERE extname='pg_stat_kcache'
      db: "{{ item.datname }}"
      port: "{{ ports.pg }}"
    register: _inst_pg_stat_kcache_schema
    loop: "{{ current_dbs.query_result }}"

  - name: create dict with db and schema
    set_fact:
      _inst_pg_stat_kcache_dict: "{{ _inst_pg_stat_kcache_dict|default({}) | combine( {item.item.datname: item.query_result[0].nspname|default('ext')} ) }}"
    loop: "{{ _inst_pg_stat_kcache_schema.results }}"

  - name: create pg_stat_kcache extension
    postgresql_ext:
      name: pg_stat_kcache
      schema: "{{ item.value }}"
      cascade: true
      db: "{{ item.key }}"
      port: "{{ ports.pg }}"
    loop: "{{ _inst_pg_stat_kcache_dict | dict2items }}"

  - name: grant privs to pg_stat_kcache
    postgresql_query:
      query: "{{ item.0 }} {% if pg_profile.is_enable %}profile_tuz,{% endif %}as_admin"
      port: "{{ ports.pg }}"
      db: "{{ item.1.datname }}"
    with_nested:
      - [ 'GRANT EXECUTE ON FUNCTION pg_stat_kcache_reset TO',
        'GRANT EXECUTE ON FUNCTION pg_stat_kcache TO',
        'GRANT SELECT ON pg_stat_kcache TO',
        'GRANT SELECT ON pg_stat_kcache_detail TO']
      - "{{ current_dbs.query_result }}"

  environment: "{{ db_connection_args }}"
  become: true
  become_user: postgres
  when: ansible_fqdn == current_master