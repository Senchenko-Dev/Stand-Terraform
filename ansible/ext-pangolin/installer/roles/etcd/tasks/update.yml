- name: Update etcd
  block:

    - name: trigger revert check
      block:

        - name: touch trigger
          file:
            path: "{{ update_status_files.dir }}/.trigger_stop_update"
            state: touch
          become: true
          when: is_recovery_test_mode and trigger_stop03m

        - name: trigger stop updated
          include_role:
            name: common
            tasks_from: trigger_stop_update

      when: inventory_hostname == 'master'

    - name: check key \"KillMode\" exists in patroni.service
      reciter:
        ANSIBLE_MODULE_ARGS:
          src: "{{ patroni_files.service_file }}"
          action: get
          parameter: KillMode
      register: is_killmode_exists
      environment:
        - PYTHONPATH: "{{ python.postgresql_venv_packages }}"
      become_user: postgres
      become: true
      when: inventory_hostname != 'etcd'

    - name: fix patroni service (pangolin has to work if patroni has pause mode)
      block:

        - name: fix kill mode of patroni linux service
          lineinfile:
            path: "{{ patroni_files.service_file }}"
            insertafter: '^Restart=on-failure'
            line: KillMode=process

        - name: just force systemd to reread configs (2.4 and above)
          systemd:
            daemon_reload: yes

        - name: wait when pgsql open port
          shell: '{{ PGHOME_OLD }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ ports.pg }}'
          register: result
          until: result.stdout.find("accepting connections") != -1
          retries: 6
          delay: 10
          become_user: postgres

      become: true
      when: inventory_hostname != 'etcd' and is_killmode_exists.message != 'process'

    - name: turn on pause mode, because passwords in postgres.yml will be changed
      include_role:
        name: patroni
        tasks_from: update_with_patronictl.yml
      vars:
        change_params: "pause: true"
        PGHOME: "{{ PGHOME_OLD }}"

    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and etcd_error_um001m and inventory_hostname == 'master'
    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and etcd_error_um001r and inventory_hostname == 'replica'
    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and etcd_error_um001e and inventory_hostname == 'etcd'

    - name: stop, update version of etcd
      block:

        - name: stop etcd service
          service:
            name: etcd
            state: stopped

        - name: loop wait for etcd stopped
          systemd:
            name: etcd
          register: result
          until: result.status.ActiveState != 'active'
          retries: 6
          delay: 10

        - debug: msg="{{ update_error_types_breakpoint_msg }}"
          when: is_recovery_test_mode and etcd_error_um002m and inventory_hostname == 'master'
        - debug: msg="{{ update_error_types_breakpoint_msg }}"
          when: is_recovery_test_mode and etcd_error_um002r and inventory_hostname == 'replica'
        - debug: msg="{{ update_error_types_breakpoint_msg }}"
          when: is_recovery_test_mode and etcd_error_um002e and inventory_hostname == 'etcd'

        - name: remove etcd package
          yum:
            name: etcd
            state: absent

        - name: remove old directory/files, if exist
          file:
            path: "{{ item }}"
            state: absent
          with_items:
            - "{{ etcd_files.conf_dir }}"
            - "{{ etcd_files.data_dir }}"
            - "{{ etcd_files.service_file }}"
          become_user: root

        - name: register etcd service in systemd
          template:
            src: etcd.service.j2
            dest: "{{ etcd_files.service_file }}"
            owner: postgres
            group: postgres
            mode: 0640

        - name: install etcd
          include_role:
            name: common
            tasks_from: install_versioned_package
          vars:
            _install_versioned_package_name: etcd
            _install_versioned_package_version: "{{ versions.etcd }}"

        - name: make etcd config from template
          template:
            src: etcd.conf.j2
            dest: "{{ etcd_files.conf_dir }}/etcd.conf"

        - name: change permissions for etcd directory
          file:
            path: "{{ item }}"
            recurse: yes
            owner: postgres
            group: postgres
            mode: 0700
          with_items:
            - "{{ etcd_files.conf_dir }}"
            - "{{ etcd_files.data_dir }}"

      become: true

    - name: update bash_profile
      include_role:
        name: common
        tasks_from: bash_profile
      vars:
        component_name: 'etcd'

  rescue:

    - name: replica updated with error
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          aggregate: true
          hosts:
            replica: true
          components:
            etcd: true
          types:
            etcd:
              main: true
      run_once: true
      when: inventory_hostname == 'replica'

    - name: master updated with error
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          aggregate: true
          hosts:
            master: true
          components:
            etcd: true
          types:
            etcd:
              main: true
      run_once: true
      when: inventory_hostname == 'master'
    
    - name: etcd updated with error
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          aggregate: true
          hosts:
            etcd: true
          components:
            etcd: true
          types:
            etcd:
              main: true
      run_once: true
      when: inventory_hostname == 'etcd'

  always:
  
    - name: Set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.global_bin_2 }}'