- name: Check directory for ssl certificates
  stat:
    path: "{{ PGSSL }}"
  become: true
  register: postgresql_ssl_directory

- name: Ensure data and log dirs exists
  file:
    path: "{{ PGSSL }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0750
  become: true
  when: not postgresql_ssl_directory.stat.exists

- name: Check certificates on host
  block:

    - name: setup variable
      set_fact:
        found_ssl_certificates: []

    - name: check files on host
      stat:
        path: "{{ item }}"
      become: true
      with_items:
        - "{{ pg_certs_pwd.root_ca }}"
        - "{{ pg_certs_pwd.server_key }}"
        - "{{ pg_certs_pwd.postgres_key }}"
      register: state_of_ssl_files

    - name: add data to variable
      set_fact:
        found_ssl_certificates: "{{ found_ssl_certificates + [state_of_ssl_files.results[item].stat.exists] }}"
      with_items: [0, 1, 2]

    - name: setup variable
      set_fact:
        ssl_certificates_exists: "{% if true in found_ssl_certificates %}true{% else %}false{% endif %}"

- name: Generate certificates for master and replica
  block:

    - name: create a self signed root certificate
      block:

        - name: make tmp ssl directory
          file:
            path: '{{ REMOTE_TMP }}/certificates'
            state: directory

        - name: create csr for root certificate
          shell: "openssl req -new -nodes -text -out {{ PGSSL }}/root.csr -keyout {{ PGSSL }}/root.key -subj '/CN={{ hostvars['master'].ansible_fqdn }}'"

        - name: create self sign root certificate
          shell: "openssl x509 -req -in {{ PGSSL }}/root.csr -text -days 3650  -extfile {{ generate_cert_conf }} -extensions
                  v3_ca -signkey {{ PGSSL }}/root.key -out {{ pg_certs_pwd.root_ca }}"

      run_once: true
      become: true
      become_user: postgres

    - name: fetch files from master
      fetch:
        src: '{{ item }}'
        dest: '{{ local_distr_path }}/'
        flat: yes
      with_items:
        - '{{ pg_certs_pwd.root_ca }}'
        - '{{ PGSSL }}/root.key'
      run_once: true
      become: true
      become_user: postgres

    - name: copy files from ansible host
      copy:
        src: '{{ item }}'
        dest: '{{ PGSSL }}'
      with_items:
        - '{{ local_distr_path }}/root.crt'
        - '{{ local_distr_path }}/root.key'
      become: true
      become_user: postgres

    - name: create server certificate
      block:

        - name: create csr for server certificate
          shell: "openssl req -new -nodes -text -out {{ PGSSL }}/server.csr -keyout {{ pg_certs_pwd.server_key }} -subj
                  '/CN={{ ansible_default_ipv4.address }}'"

        - name: siging server certificate
          shell: "openssl x509 -req -in {{ PGSSL }}/server.csr -text -days 365 -CA {{ pg_certs_pwd.root_ca }} -CAkey {{ PGSSL }}/root.key -CAcreateserial
                  -out {{ pg_certs_pwd.server_cert }}"

        - name: сhange permissions
          file:
            path: "{{ pg_certs_pwd.server_key }}"
            owner: postgres
            group: postgres
            mode: og-rwx

      become: true
      become_user: postgres

    - name: сreate postgres client certificate
      block:

        - name: create csr
          shell: "openssl req -new -nodes -text -out {{ PGSSL }}/client.csr -keyout {{ pg_certs_pwd.postgres_key }} -subj '/CN=postgres'"

        - name: siging postgres certificate
          shell: "openssl x509 -req -in {{ PGSSL }}/client.csr -text -days 365 -CA {{ pg_certs_pwd.root_ca }} -CAkey {{ PGSSL }}/root.key -CAcreateserial
                  -out {{ pg_certs_pwd.postgres_cert }}"

        - name: сhange permissions
          file:
            path: "{{ pg_certs_pwd.postgres_key }}"
            owner: postgres
            group: postgres
            mode: og-rwx

        - name: write client certificate exports in bash_profile
          lineinfile:
            path: ~/.bash_profile
            insertafter: EOF
            line: "{{ item }}"
            state: present
          with_items:
            - export PGSSLCERT={{ pg_certs_pwd.postgres_cert }}
            - export PGSSLKEY={{ pg_certs_pwd.postgres_key }}
            - export PGSSLROOTCERT={{ pg_certs_pwd.root_ca }}

      become: true
      become_user: postgres
      
  when: not ssl_certificates_exists
