- name: Define version of current python interpreter
  set_fact:
    previous_python_interpreter: "{{ ansible_python_interpreter }}"

- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

- name: Check args is correct
  assert:
    that: item.var not in ['null','']
    fail_msg: "ERROR: {{ item.name }} is empty"
    success_msg: "OK: {{ item.name }} is {{ item.var }}"
  loop:
    - { name: "_fvpbu_pghome",           var: "{{ _fvpbu_pghome }}" }
    - { name: "_fvpbu_pgdata",           var: "{{ _fvpbu_pgdata }}" }
    - { name: "_fvpbu_add_tmp_function", var: "{{ _fvpbu_add_tmp_function }}" }

- name: Fix Pangolin 44x versions before update
  block:

    - name: add synchronous_commit with off
      replace:
        path: '{{ _fvpbu_pgdata }}/postgresql.conf'
        regexp: synchronous_commit\s*=\s*'(on|True|true)'.*$
        replace: synchronous_commit = 'off'
      register: synchronous_config

    - name: start Pangolin by pg_ctl
      shell: "{{ _fvpbu_pghome }}/bin/pg_ctl start -D {{ _fvpbu_pgdata }}"
      when: is_patroni_exists

    - name: start Pangolin
      service:
        name: postgresql
        state: started
      become_user: root
      when: not is_patroni_exists

    - name: check database started
      shell: '{{ _fvpbu_pghome }}/bin/pg_isready -h 127.0.0.1 -p {{ ports.pg }}'
      register: result
      until: result.stdout.find("accepting connections") != -1
      retries: 60
      delay: 1

    - name: add tmp functions for correct data migration
      block:

        - name: enable connect to template0 db
          postgresql_query:
            port: "{{ ports.pg }}"
            query: UPDATE pg_database SET datallowconn = true where datname = 'template0'

        - name: create temp functions
          postgresql_query:
            port: "{{ ports.pg }}"
            query: "{{ item.0 }}"
            db: "{{ item.1 }}"
          with_nested: 
            - [ "CREATE OR REPLACE FUNCTION pg_catalog.check_role_params(role text, settings_to_check text) \
                 RETURNS boolean LANGUAGE sql STABLE PARALLEL SAFE STRICT AS $function$select FALSE;$function$", 
                 "CREATE OR REPLACE FUNCTION pg_catalog.check_roles_is_on() RETURNS boolean LANGUAGE sql STABLE PARALLEL \
                 SAFE STRICT AS $function$select FALSE;$function$" ]
            - [ "postgres", "template1", "template0"]

      when: _fvpbu_add_tmp_function

    - name: drop tmp functions after correct data migration
      block:

        - name: create temp functions
          postgresql_query:
            port: "{{ ports.pg }}"
            query: "{{ item.0 }}"
            db: "{{ item.1 }}"
          with_nested: 
            - [ "DROP FUNCTION pg_catalog.check_role_params(role text, settings_to_check text), pg_catalog.check_roles_is_on()" ]
            - [ "postgres", "template1", "template0"]

        - name: disable connect to template0 db
          postgresql_query:
            port: "{{ ports.pg }}"
            query: UPDATE pg_database SET datallowconn = false where datname = 'template0'

        - name: remove synchronous_commit off from postgres.conf
          replace:
            path: '{{ _fvpbu_pgdata }}/postgresql.conf'
            regexp: synchronous_commit = 'off'
            replace: synchronous_commit = 'on'
          when: synchronous_config.changed
      when: not _fvpbu_add_tmp_function

    - name: stop Pangolin by pg_ctl
      shell: "{{ _fvpbu_pghome }}/bin/pg_ctl stop -D {{ _fvpbu_pgdata }}"

    - name: check database stopped
      shell: '{{ _fvpbu_pghome }}/bin/pg_isready -h 127.0.0.1 -p {{ ports.pg }}'
      register: result
      until: result.stdout.find("no response") != -1
      retries: 60
      delay: 1
      failed_when: "result.rc|int not in [0,2,3]"
  
  environment:
    - LD_LIBRARY_PATH: "{{ _fvpbu_pghome }}/lib"
    - PG_PLUGINS_PATH: "{{ _fvpbu_pghome }}/lib"
    - PGPORT: "{{ ports.pg }}"
  become: true
  become_user: postgres
  when: inventory_hostname == 'master'

  always:

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ previous_python_interpreter }}'

    - name: unset args
      set_fact: 
        _fvpbu_pghome: 'null'
        _fvpbu_pgdata: 'null'
        _fvpbu_add_tmp_function: 'null'