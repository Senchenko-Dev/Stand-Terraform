- name: Remove pgaudit as extension
  block:

    - name: pgaudit will be removed
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          types:
            pg: 
              remove_pgaudit: true

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

    - name: check that {{ update_status_files.pgaudit_bases }}
      stat:
        path: "{{ update_status_files.dir }}/{{ update_status_files.pgaudit_bases }}"
      register: json_with_pgaudit_bases
      become_user: root

    - name: remember dbs with audit
      block:

        - name: get list of databases
          postgresql_query:
            port: "{{ ports.pg }}"
            query: SELECT datname FROM pg_database WHERE datname NOT LIKE 'template0'
          register: dbs

        - name: get list of databases with pgaudit
          postgresql_query:
            port: "{{ ports.pg }}"
            query: SELECT name FROM pg_available_extensions WHERE installed_version is not null AND name='pgaudit'
            db: "{{ item.datname }}"
          loop: "{{ dbs.query_result }}"
          register: dbs_with_audit

        - name: define default dbs with audit
          set_fact:
            dbs_with_audit_lst: []

        - name: update dbs list with audit
          set_fact:
            dbs_with_audit_lst: "{{ dbs_with_audit_lst + [item.item.datname] }}"
          loop: "{{ dbs_with_audit.results }}"
          loop_control:
            index_var: index
          when: dbs_with_audit.results[ index ].rowcount|int != 0

        - name: create cache update dir
          file:
            path: "{{ update_status_files.dir }}"
            state: directory
            mode: '0700'
            owner: 'postgres'
            group: 'postgres'
            recurse: yes
          
        - name: create {{ update_status_files.pgaudit_bases }} file
          file:
            path: "{{ update_status_files.dir }}/{{ update_status_files.pgaudit_bases }}"
            state: touch
            owner: postgres
            group: postgres
            mode: '600'

        - name: check that {{ update_status_files.pgaudit_bases }} created
          stat:
            path: "{{ update_status_files.dir }}/{{ update_status_files.pgaudit_bases }}"
          register: file_with_pgaudit_bases_created

        - name: save dbs_with_audit_lst as json structure
          set_fact:
            json_dbs_with_audit_lst:
              dbs_with_audit_lst: '{{ dbs_with_audit_lst }}'

        - name: write prev pg se version to {{ update_status_files.pgaudit_bases }}
          copy:
            content: "{{ json_dbs_with_audit_lst | to_json }}"
            dest: '{{ update_status_files.dir }}/{{ update_status_files.pgaudit_bases }}'

        - name: check that {{ update_status_files.pgaudit_bases }} file is exists
          assert:
            that: file_with_pgaudit_bases_created.stat.exists
            fail_msg: "Список баз данных, в которые было установлено расширение pgaudit не был сохранен в файл."

      run_once: true
      become_user: root
      when: not json_with_pgaudit_bases.stat.exists

    - name: read dbs from file
      block:

        - name: fetch {{ update_status_files.pgaudit_bases }} file from master
          fetch:
            src: '{{ update_status_files.dir }}/{{ update_status_files.pgaudit_bases }}'
            dest: '{{ REMOTE_TMP }}'

        - name: read json file with pgaudit dbs
          include_vars:
            file: "{{ REMOTE_TMP }}/master/{{ update_status_files.dir }}/{{ update_status_files.pgaudit_bases }}"

        - name: print dbs_with_audit_lst
          debug: 
            msg: "{{ dbs_with_audit_lst }}"
      
      when: json_with_pgaudit_bases.stat.exists

    - name: remove pgaudit as extension
      postgresql_ext:
        port: "{{ ports.pg }}"
        name: pgaudit
        db: "{{ item }}"
        state: absent
      loop: "{{ dbs_with_audit_lst }}"

    - name: pgaudit successful removed
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          types:
            pg: 
              remove_pgaudit: false

  rescue:

    - name: master updated with error
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          aggregate: true
          hosts:
            master: true
          components:
            pg: true
      when: inventory_hostname == 'master'

  always:

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.global_bin_2 }}'

  environment:
    - PGHOST: "127.0.0.1"
    - PGSSLCERT: "{{ pg_certs.ssl_cert }}"
    - PGSSLKEY: "{{ pg_certs.ssl_key }}"
  become: true
  become_user: postgres
  when: "inventory_hostname == 'master' and ( [ pg_current_version, '4.3.0' ] | compare_pg_se_versions )|int == 0"