- name: Define version of current python interpreter
  set_fact:
    previous_python_interpreter: "{{ ansible_python_interpreter }}"

- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

- name: Use input password from outside
  set_fact:
    _addcfgdbuserenc_output_user_pass: '{{ _addcfgdbuserenc_input_user_pass }}'
  when: "_addcfgdbuserenc_input_user_pass is defined and _addcfgdbuserenc_input_user_pass not in ['null','']"

- name: Setting db user
  block:

    - name: create role with random password
      block:

        - name: create role with random password
          include_role:
            name: postgresql
            tasks_from: generate_and_update_db_user_pass.yml
          vars:
            _genupdatepass_dbuser: "{{ _addcfgdbuserenc_user }}"

        - name: save user pass
          set_fact:
            _addcfgdbuserenc_output_user_pass: "{{ _genupdatepass_generated_pass }}"
          no_log: "{{ nolog }}"
          run_once: true
          become_user: root

      when: "inventory_hostname == 'master' and (_addcfgdbuserenc_input_user_pass is not defined or _addcfgdbuserenc_input_user_pass in ['null',''])"

    - name: save user pass
      set_fact:
        _addcfgdbuserenc_output_user_pass: "{{ _addcfgdbuserenc_output_user_pass }}"
      no_log: "{{ nolog }}"
      run_once: true
      when: "action_type in ['update_major', 'update_minor']"

    - name: set default role privs
      set_fact:
        _addcfgdbuserenc_privs: ''
      when: _addcfgdbuserenc_privs is not defined
       
    - name: configure role
      postgresql_query:
        port: "{{ ports.pg }}"
        query: "ALTER ROLE \"{{ _addcfgdbuserenc_user }}\" {{ _addcfgdbuserenc_privs }} VALID UNTIL 'infinity' CONNECTION LIMIT 5"
      when: inventory_hostname == 'master' 

    - name: create encrypt space
      block:

        - name: create encrypt space for localhost
          include_role:
            name: postgresql
            tasks_from: create_encrypt_space
          vars:
            username: "{{ _addcfgdbuserenc_user }}"
            database: "{{ create_encrypt_space_item }}"
            password: "{{ _addcfgdbuserenc_output_user_pass }}"
            address: "localhost"
            curr_pghome: "{{ _addcfgdbuserenc_pghome }}"
          loop: "{{ _addcfgdbuserenc_dbnames }}"
          loop_control:
            loop_var: create_encrypt_space_item

        - name: create encrypt space for master
          include_role:
            name: postgresql
            tasks_from: create_encrypt_space
          vars:
            username: "{{ _addcfgdbuserenc_user }}"
            database: "{{ create_encrypt_space_item }}"
            password: "{{ _addcfgdbuserenc_output_user_pass }}"
            address: "{{ hostvars['master'].ansible_fqdn }}"
            curr_pghome: "{{ _addcfgdbuserenc_pghome }}"
          loop: "{{ _addcfgdbuserenc_dbnames }}"
          loop_control:
            loop_var: create_encrypt_space_item

    - name: create encrypt space for replica
      include_role:
        name: postgresql
        tasks_from: create_encrypt_space
      vars:
        username: "{{ _addcfgdbuserenc_user }}"
        database: "{{ create_encrypt_space_item }}"
        password: "{{ _addcfgdbuserenc_output_user_pass }}"
        address: "{{ hostvars['replica'].ansible_fqdn }}"
        curr_pghome: "{{ _addcfgdbuserenc_pghome }}"
      loop: "{{ _addcfgdbuserenc_dbnames }}"
      loop_control:
        loop_var: create_encrypt_space_item
      when: installation_type == 'cluster'

    - name: unset input password from outside
      set_fact:
        _addcfgdbuserenc_input_user_pass: 'null'
  
    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ previous_python_interpreter }}'
  
  environment: "{{ db_connection_args }}"
  become: true
  become_user: postgres
  when: inventory_hostname != 'etcd'
