- name: Find 3rdparty packages
  block:

    - name: create default list packages
      set_fact:
        packages: []

    - name: check if package exists
      stat:
        path: "{{ local_distr_path }}/3rdparty/{{ item }}.tar.gz"
      with_items:
        - "GDAL-src"
        - "GDAL"
        - "PROJ-src"
        - "PROJ"
        - "SFCGAL-src"
        - "SFCGAL"
        - "cgal-src"
        - "cgal"
        - "geos-src"
        - "geos"
        - "postgis-src"
        - "postgis"
        - "pgrouting"
        - "pgrouting-src"
      register: check_targz

    - name: create list with exists packages
      set_fact:
        packages: "{{ packages + [check_targz.results[index].item] }}"
      with_items: "{{ check_targz.results }}"
      loop_control:
        index_var: index
        label: "{{ check_targz.results[index].item }}"
      when: check_targz.results[index].stat.exists

  become: false
  delegate_to: localhost

- name: Copy cracklib, postgis and pgroutin in {{ PGHOME }}/3rdparty
  block:

    - name: copy cracklib to {{ PGHOME }}/lib
      copy:
        src: "{{ item.src }}"
        dest: "{{ PGHOME }}/lib/"
        owner: postgres
        group: postgres
        mode: "{{ item.mode }}"
      with_items:
        - { src: '{{ local_distr_path }}/3rdparty/cracklib/libcrack.so', mode: 600 }
        - { src: '{{ local_distr_path }}/3rdparty/cracklib/pw_dict.hwm', mode: 600 }
        - { src: '{{ local_distr_path }}/3rdparty/cracklib/pw_dict.pwd', mode: 600 }
        - { src: '{{ local_distr_path }}/3rdparty/cracklib/pw_dict.pwi', mode: 600 }

    - name: copy other packages
      block:

        - name: create dirs for packages
          file:
            path: "{{ PGHOME }}/3rdparty/{{ item }}"
            state: directory
            owner: postgres
            group: postgres
            mode: 0700
          with_items: "{{ packages }}"

        - name: copy packages in {{ PGHOME }}
          copy:
            src: "{{ local_distr_path }}/3rdparty/{{ item }}.tar.gz"
            dest: "{{ PGHOME }}/3rdparty"
          with_items: "{{ packages }}"

        - name: unarchive packages
          unarchive:
            src:  "{{ PGHOME }}/3rdparty/{{ item }}.tar.gz"
            dest: "{{ PGHOME }}/3rdparty"
            remote_src: yes
            owner: postgres
            group: postgres
            mode: 0700
          with_items: "{{ packages }}"

        - name: remove archives
          file:
            state: absent
            path: "{{ PGHOME }}/3rdparty/{{ item }}.tar.gz"
          with_items: "{{ packages }}"

      when: packages

  become: true

