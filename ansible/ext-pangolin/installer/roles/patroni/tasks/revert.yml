- name: Recovery patroni
  block:
  
    - name: Set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.global_bin_2 }}'

    - name: define name of patroni venv
      set_fact:
        _revertpatroni_patroni_venv_name: "postgres_venv"

    - name: define name of patroni venv
      set_fact:
        _revertpatroni_patroni_venv_name: "patroni_venv"
      when: ( [ pg_current_version, '4.3.0' ] | compare_pg_se_versions )|int != 0

    - name: compare prev and new patroni version
      block:

        - name: fetch patroni se version file from master
          fetch:
            src: '{{ backup.patroni }}/{{ _revertpatroni_patroni_venv_name }}/bin/se_version'
            dest: '{{ REMOTE_TMP }}'
          when: ( [ pg_current_version, '4.5.0' ] | compare_pg_se_versions )|int != 0

        - name: get version of prev patroni 
          set_fact:
            _revertpatroni_prev_patroni_se_ver: "{%if ([ pg_current_version, '4.5.0' ] | compare_pg_se_versions)|int != 0 %} \
                                                   {{ lookup('file', '{{ REMOTE_TMP }}/master/{{ backup.patroni }}/patroni_venv/bin/se_version') }} \
                                                 {% endif %}"

        - name: get new patroni se version from file
          set_fact:
            _revertpatroni_new_patroni_se_ver: "{{ lookup('file', '{{ local_distr_path }}/patroni/se_version') }}"

        - name: compare installed and distributive versions
          set_fact:
            _revertpatroni_compare_versions: "{%if _revertpatroni_prev_patroni_se_ver != '' %}{{ [_revertpatroni_prev_patroni_se_ver, _revertpatroni_new_patroni_se_ver] | compare_versions }}{% else %}true{% endif %}"

    - name: stop patroni service
      service:
        name: patroni
        state: stopped

    - name: recovery prev version patroni from backup
      block:
        
        - name: chech that {{ python.patroni_venv }}/bin/python exists
          stat: path="{{ python.patroni_venv }}/bin/python"
          register: is_python_patroni_venv
      
        - name: remove patroni module
          pip:
            name: patroni
            state: absent
            virtualenv: "{{ python.patroni_venv }}"
          when: is_python_patroni_venv.stat.exists

        - name: remove existing python virtual environment
          file:
            path: "{{ python.patroni_venv }}"
            state: absent

        - name: remove existing patroni directory
          file:
            path: "/{{ python.patroni_venv.split('/')[1:-1] | join('/') }}"
            state: absent

        - name: create patroni bin diretory
          file:
            path: "{{ PYTHON_VENV_OLD }}"
            state: directory
            owner: postgres
            group: postgres
            mode: 0700

        - name: revert old python virtual environment
          copy:
            src: "{{ backup.patroni }}/{{ _revertpatroni_patroni_venv_name }}/"
            dest: "{{ PYTHON_VENV_OLD }}"
            owner: postgres
            group: postgres
            mode: 0700
            remote_src: yes
            directory_mode: yes

        - name: create symlink for new lib64
          file:
            src: '{{ PYTHON_VENV_OLD }}/lib'
            dest: '{{ PYTHON_VENV_OLD }}/lib64'
            state: link
            force: yes
            owner: postgres
            group: postgres

      when: _revertpatroni_compare_versions

    - name: revert old patroni configuration file
      copy:
        src: "{{ merge_cfg.result_pgse }}/postgres.yml"
        dest: "{{ patroni_files.conf_dir }}/postgres.yml"
        owner: postgres
        group: postgres
        mode: 0600
        remote_src: yes
      become_user: postgres

    - name: revert old configuration of patroni service
      copy:
        src: "{{ backup.patroni_intermediate }}{{ patroni_files.service_file }}"
        dest: "{{ patroni_files.service_file }}"
        remote_src: yes

    - name: revert shell profile
      copy:
        dest: "{{ shell_profile_file }}"
        src: "{{ backup.patroni_intermediate }}{{ shell_profile_file }}"
        remote_src: yes
        owner: postgres
        group: postgres

    - name: export path for old patroni directory
      lineinfile:
        path: "{{ shell_profile_file }}"
        insertafter: EOF
        line: "export PATH={{ PYTHON_VENV_OLD }}/bin:$PATH"
        state: present
      become_user: postgres

    - name: reload systemd and start service
      systemd:
        name: patroni
        state: restarted
        daemon_reload: yes
        enabled: yes

    - name: wait when pgsql open port
      shell: '{{ PGHOME }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ PGPORT_OLD }}'
      register: result
      until: result.stdout.find("accepting connections") != -1
      retries: 60
      delay: 1
      become_user: postgres

  become: true