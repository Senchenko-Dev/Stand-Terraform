- name: Update patroni nodes
  block:

    - name: gather packages info
      package_facts:
        manager: "auto"
      no_log: "{{ nolog }}"

    - name: send reload command to patroni
      include_tasks: update_with_patronictl.yml
      vars:
        endpoint_name: reload

    - name: wait when pgsql open port
      shell: '{{ PGHOME }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ ports.pg }}'
      register: result
      until: result.stdout.find("accepting connections") != -1
      retries: 60
      delay: 1

    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and patroni_error_um003m and inventory_hostname == 'master'
    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and patroni_error_um003r and inventory_hostname == 'replica'

    - name: finish patroni update
      block:

        - name: turn off pause mode after patroni nodes updated
          include_role:
            name: patroni
            tasks_from: update_with_patronictl.yml
          vars:
            change_params: "pause: false"

        - name: define current pghome
          set_fact:
            _updtpost_pghome: "{{ PGHOME }}"
          
        - name: restart cluster if need
          import_tasks: pending_restart.yml
          vars:
            current_python_venv: "{{ python.patroni_venv }}"
            current_pghome: "{{ _updtpost_pghome }}"
            current_pgport: "{{ ports.pg }}"
            current_patroni_port: "{{ ports.patroni }}"
      
      when: inventory_hostname == 'replica' or installation_type == 'standalone'

    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and patroni_error_um004m and inventory_hostname == 'master'
    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and patroni_error_um004r and inventory_hostname == 'replica'

  rescue:

    - name: replica updated with error
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          aggregate: true
          hosts:
            replica: true
          components:
            patroni: true
          types:
            patroni:
              finally: true
      run_once: true
      when: inventory_hostname == 'replica'

    - name: master updated with error
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          aggregate: true
          hosts:
            master: true
          components:
            patroni: true
          types:
            patroni:
              finally: true
      run_once: true
      when: inventory_hostname == 'master'

  always:

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.global_bin_2 }}'

  become: true