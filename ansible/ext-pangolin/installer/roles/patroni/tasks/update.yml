- name: Update patroni nodes
  block:

    - name: trigger revert check
      block:

        - name: touch trigger
          file:
            path: "{{ update_status_files.dir }}/.trigger_stop_update"
            state: touch
          become: true
          when: is_recovery_test_mode and trigger_stop04m

        - name: trigger stop updated
          include_role:
            name: common
            tasks_from: trigger_stop_update

      when: inventory_hostname == 'master'

    - name: gather packages info
      package_facts:
        manager: "auto"
      no_log: "{{ nolog }}"

    - name: check current path of patroni virtual environment
      stat:
        path: "{{ python.patroni_venv }}"
      register: patroni_venv_dir

    - name: turn on pause mode, if before etcd didn't updated
      include_tasks: update_with_patronictl.yml
      vars:
        change_params: "pause: true"
        PGHOME: "{{ PGHOME_OLD }}"
      when: not etcd

    - name: get parameters from patroni via api
      uri:
        url: '{{ protocol }}://{{ ansible_fqdn }}:{{ ports.patroni }}'
        return_content: yes
        status_code: ['200', '503']
      register: patroni_parameters
      become_user: postgres

    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and patroni_error_um001m and inventory_hostname == 'master'
    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and patroni_error_um001r and inventory_hostname == 'replica'

    - name: define variable with version of installed patroni 
      set_fact:
        patroni_installed_version: "{%if 'se_version' in patroni_parameters.json.patroni %}{{ patroni_parameters.json.patroni.se_version }}{% endif %}"

    - name: get patroni se version from file
      set_fact:
        patroni_se_version: "{{ lookup('file', '{{ local_distr_path }}/patroni/se_version') }}"

    - name: compare installed and distributive versions
      set_fact:
        compare_result: "{%if patroni_installed_version != '' %}{{ [patroni_installed_version, patroni_se_version] | compare_versions }}{% else %}true{% endif %}"

    - name: define required variable for update
      set_fact:
        is_pg_old_venv_dir: "{% if patroni_venv_dir.stat.exists == true %}false{% else %}true{% endif %}"

    - name: stop patroni linux service
      service:
        name: patroni
        state: stopped

    - name: create patroni directory
      file:
        path: "{{ python.patroni_venv }}"
        state: directory
        owner: postgres
        group: postgres
        mode: 0700

    - name: create patroni cfg diretory
      file:
        path: "{{ patroni_files.conf_dir }}"
        state: directory
        owner: postgres
        group: postgres
        mode: 0700

    - name: copy new config of patroni
      copy:
        src: "{{ merge_cfg.result_patroni }}/postgres.yml"
        dest: "{{ patroni_files.conf_dir }}/postgres.yml"
        owner: postgres
        group: postgres
        mode: 0600
        remote_src: true

    - name: update callback script for change role action
      template:
        src: reload_pgbouncer.sh.j2
        dest: "{{ patroni_files.conf_dir }}/reload_pgbouncer.sh"
        owner: postgres
        group: postgres
        mode: 0500
        trim_blocks: False

    - name: update patroni linux service (first step)
      template:
        src: patroni.service.j2
        dest: "{{ patroni_files.service_file }}"
      vars:
        PGHOME: "{{ PGHOME_OLD }}"

    - name: update patroni version, if current version order than new
      block:

        - name: remove existing python virtual environment
          file:
            path: "{{ PYTHON_VENV_OLD }}"
            state: absent

        - name: create directory for python virtual environment of patroni
          file:
            path: "{{ python.patroni_venv }}"
            state: directory
            owner: postgres
            group: postgres
            mode: 0700

        - name: create new python virtual environment for patroni
          include_role:
            name: checkup
            tasks_from: python_env
          vars:
            component_name: patroni

        - name: copy patroni files to node
          unarchive:
            src: "{{ local_distr_path }}/patroni/{{ item.name }}.tar.gz"
            dest: "{{ item.path }}"
            group: postgres
            owner: postgres
            mode: 0700
          loop:
            - { name: patroni,            path: "{{ python.patroni_venv }}/bin/" }
            - { name: postgresql_se_libs, path: "{{ python.patroni_venv }}/lib/" }
          become_user: postgres

        - name: copy patroni se version file
          copy:
            src: "{{ local_distr_path }}/patroni/se_version"
            dest: "{{ python.patroni_venv }}/bin/se_version"
            owner: postgres
            group: postgres
            mode: 0600

        - name: copy patroni version file
          copy:
            src: "{{ local_distr_path }}/patroni/version"
            dest: "{{ python.patroni_venv }}/bin/version"
            owner: postgres
            group: postgres
            mode: 0600
        
      when: compare_result or is_pg_old_venv_dir

    - name: export path for new patroni directory
      lineinfile:
        path: "{{ shell_profile_file }}"
        insertafter: EOF
        line: "{{ item }}"
        state: present
      with_items:
        - export PATH=$PATH:{{ python.patroni_venv }}/bin
      become_user: postgres

    - name: include_role
      include_role:
        name: common
        tasks_from: bash_profile
      vars:
        component_name: 'patroni'

    - name: reload systemd and restart service
      systemd:
        name: patroni
        state: restarted
        daemon_reload: yes
        enabled: yes
    
    - name: turn off pause mode (to control that pangolin started)
      include_tasks: update_with_patronictl.yml
      vars:
        change_params: "pause: false"
        PGHOME: "{{ PGHOME_OLD }}"

    - name: pause for restart patroni
      pause:
        seconds: 20

    - name: wait when pgsql open port
      shell: '{{ PGHOME_OLD }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ ports.pg }}'
      register: result
      until: result.stdout.find("accepting connections") != -1
      retries: 60
      delay: 1

    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and patroni_error_um002m and inventory_hostname == 'master'
    - debug: msg="{{ update_error_types_breakpoint_msg }}"
      when: is_recovery_test_mode and patroni_error_um002r and inventory_hostname == 'replica'

    - name: to do checkpoint
      include_role:
        name: postgresql
        tasks_from: update_run_checkpoint.yml
      vars:
        _runcheckpoint_database_port: "{{ ports.pg }}"

    - name: turn on pause mode (if replica will be update)
      include_tasks: update_with_patronictl.yml
      vars:
        change_params: "pause: true"
        PGHOME: "{{ PGHOME_OLD }}"
      when: "inventory_hostname == 'master' and \
             installation_type == 'cluster'"

    - name: restart cluster if need
      import_tasks: pending_restart.yml
      vars:
        current_python_venv: "{{ python.patroni_venv }}"
        current_pghome: "{{ PGHOME_OLD }}"
        current_pgport: "{{ ports.pg }}"
        current_patroni_port: "{{ ports.patroni }}"
      when: "(inventory_hostname == 'replica' or installation_type == 'standalone')"

  rescue:

    - name: replica updated with error
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          aggregate: true
          hosts:
            replica: true
          components:
            patroni: true
          types:
            patroni:
              main: true
      run_once: true
      when: inventory_hostname == 'replica'

    - name: master updated with error
      set_fact:
        update_errors: "{{ update_errors|combine(data, recursive=True) }}"
        cacheable: yes
      vars:
        data:
          aggregate: true
          hosts:
            master: true
          components:
            patroni: true
          types:
            patroni:
              main: true
      run_once: true
      when: inventory_hostname == 'master'

  always:

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.global_bin_2 }}'

  become: true
  when: inventory_hostname != 'etcd'