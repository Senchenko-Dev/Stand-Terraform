- name: Stop services
  block:

    - name: get service_facts
      service_facts:
      no_log: "{{ nolog }}"

    - name: stop components
      set_fact:
        stop_list_components:  "{% if tag == 'cluster-patroni-etcd-pgbouncer-haproxy' %}\
                                      [ 'etcd', 'patroni', 'pangolin', 'haproxy', 'pgbouncer']\
                                {% elif tag =='cluster-patroni-etcd-pgbouncer' %}\
                                      ['etcd', 'patroni', 'pangolin', 'confd', 'pgbouncer']\
                                {% elif tag =='standalone-patroni-etcd-pgbouncer' %}\
                                      ['etcd', 'patroni', 'pangolin', 'pgbouncer']\
                                {% elif tag =='standalone-postgresql-pgbouncer' %}\
                                      ['pangolin', 'pgbouncer']\
                                {% else %}\
                                      ['pangolin']\
                                {% endif %}"

    - name: stop patroni
      block:

        - name: stop patroni service
          systemd:
            name: patroni
            state: stopped
          become_user: root

        - name: loop wait for patroni stopped
          systemd:
            name: patroni
          register: result
          until: result.status.ActiveState != 'active'
          retries: 6
          delay: 10

      when: "'patroni' in stop_list_components \
            and inventory_hostname != 'etcd'"

    - name: stop etcd
      block:

        - name: stop etcd service
          systemd:
            name: etcd
            state: stopped
          become_user: root

        - name: loop wait for etcd stopped
          systemd:
            name: etcd
          register: result
          until: result.status.ActiveState != 'active'
          retries: 6
          delay: 10

      when: "'etcd' in stop_list_components"

    - name: stop confd
      block:

        - name: stop confd service
          systemd:
            name: confd
            state: stopped
          become_user: root

        - name: loop wait for confd stopped
          systemd:
            name: confd
          register: result
          until: result.status.ActiveState != 'active'
          retries: 6
          delay: 10

      when: "'confd.service' in ansible_facts.services \
              and inventory_hostname != 'etcd'"

    - name: stop haproxy
      block:

        - name: stop service haproxy, if started
          systemd:
            name: haproxy
            state: stopped
          become_user: root

        - name: loop wait for haproxy stopped
          systemd:
            name: haproxy
          register: result
          until: result.status.ActiveState != 'active'
          retries: 6
          delay: 10

      when: "'haproxy' in stop_list_components \
            and inventory_hostname != 'etcd'"

    - name: stop pgbouncer
      block:

        - name: stop pgbouncer service
          systemd:
            name: pgbouncer
            state: stopped
          become_user: root

        - name: loop wait for pgbouncer stopped
          systemd:
            name: pgbouncer
          register: result
          until: result.status.ActiveState != 'active'
          retries: 6
          delay: 10

      when: "'pgbouncer' in stop_list_components \
            and inventory_hostname != 'etcd'"

    - name: stop Pangolin
      block:

        - name: stop and remove pg_receivewal
          block:

            - name: stop pg_receivewal daemon
              systemd:
                name: pg_receivewal
                state: stopped

            - name: loop wait for pg_receivewal stopped
              systemd:
                name: pg_receivewal
              register: result
              until: result.status.ActiveState != 'active'
              retries: 6
              delay: 10

            - name: remove pg_receivewal daemon
              file:
                path: "{{ service_path_dir }}/pg_receivewal.service"
                state: absent

          become_user: root
          when: "'pg_receivewal.service' in ansible_facts.services"

        - name: stop Pangolin by postgresql.service
          service:
            name: postgresql
            state: stopped
          become_user: root
          when: "'postgresql.service' in ansible_facts.services"

        - name: stop old Pangolin by pg_ctl
          shell: "{{ PGHOME_OLD }}/bin/pg_ctl stop -D {{ PGDATA_OLD }}"
          ignore_errors: yes

        - name: stop new Pangolin by pg_ctl
          shell: "{{ PGHOME }}/bin/pg_ctl stop -D {{ PGDATA }}"
          ignore_errors: yes

        - name: check that postgresql of old version is stopped
          shell: '{{ PGHOME_OLD }}/bin/pg_ctl status -D {{ PGDATA_OLD }}'
          register: result
          until: result.stdout.find("no server running") != -1
          retries: 6
          delay: 10
          failed_when: result.rc != 3
          ignore_errors: yes

        - name: check that postgresql of new version is stopped
          shell: '{{ PGHOME }}/bin/pg_ctl status -D {{ PGDATA }}'
          register: result
          until: result.stdout.find("no server running") != -1
          retries: 6
          delay: 10
          failed_when: result.rc != 3
          ignore_errors: yes

        - name: check Pangolin (must be stopped)
          shell: "ps aux"
          register: result
          until: result.stdout.find("bin/postgres") == -1
          retries: 6
          delay: 10

        - name: check that DB doesnt work
          stat:
            path: "{{ item }}"
          register: pid_state
          failed_when: pid_state.stat.exists
          with_items:
            - "{{ PGDATA_OLD }}/postmaster.pid"
            - "{{ PGDATA }}/postmaster.pid"
          become_user: root

      become_user: postgres
      when: inventory_hostname != 'etcd'

  become: true
  when: "not update_errors.components.checkup \
         and not update_errors.types.pg_auth_reencrypt.check_and_stop"