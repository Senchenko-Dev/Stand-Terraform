---

- name: Check if certificates are turned on
  reciter:
    src: "{{ PGDATA_OLD }}/postgresql.conf"
    action: get
    parameter: ssl
  register: ssl
  become: true
  become_user: postgres

- name: Check if pg_hba contain right string
  shell: 'grep "hostssl postgres postgres 127.0.0.1/32 cert" {{ PGDATA_OLD }}pg_hba.conf'
  register: ssl_pg_hba
  ignore_errors: yes
  become: true
  become_user: postgres

- name: Set error status 
  set_fact:
    ssl_error: "{{ control_name }}.FAIL__SSL настроен, но выключен в конфигурации БД. Возможно в кандидате на обновление уже был ранее настроен SSL. Для продолжения обновления необходимо удалить настройки БД, связанные с ssl и повторить запуск обновления.__{{ control_name }}.FAIL"
  when: ssl.message == "off"

- name: Change pg_hba for all dbs (postgresql)
  block:
  
    - name: backup old files
      include_role:
        name: common
        tasks_from: backup_all

    - name: delete pg_hba for all all connections
      lineinfile:
        path: '{{ PGDATA_OLD }}/pg_hba.conf'
        regexp: '^(.*)host all all 0.0.0.0/0 md5(.*)$'
        state: absent

    - name: change pg_hba for local connections only
      lineinfile:
        path: '{{ PGDATA_OLD }}/pg_hba.conf'
        regexp: '^(.*)(all|postgres) postgres 127.0.0.1/32 cert(.*)$'
        line: 'hostssl all postgres 127.0.0.1/32 cert'

  become: true
  when: ssl_pg_hba.stdout_lines|length > 0 and not patroni

  rescue:

    - name: set fail status
      set_fact:
        ssl_failure: "{{ control_name }}.FAIL__SSL не был настроен корректно. Возможно в кандидате на обновление уже был ранее настроен SSL. Для продолжения обновления необходимо удалить настройки БД, связанные с ssl и повторить запуск обновления.__{{ control_name }}.FAIL"

    - name: revert old postgresql configuration files
      copy:
        src: "{{ backup.postgresql }}{{ PGDATA_OLD }}/pg_hba.conf"
        dest: "{{ PGDATA_OLD }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: '0600'
        remote_src: yes

  always:

    - name: send reload command to postgresql
      shell: "{{ PGHOME_OLD }}/bin/pg_ctl reload -D {{ PGDATA_OLD }}"
      become_user: postgres

    - name: wait when pgsql open port
      shell: '{{ PGHOME_OLD }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ PGPORT_OLD }}'
      register: result
      until: result.stdout.find("accepting connections") != -1
      retries: 60
      delay: 1
      become_user: postgres

- name: Change pg_hba for all dbs (patroni)
  block:
  
    - name: backup old files
      include_role:
        name: common
        tasks_from: backup_all

    - name: delete pg_hba for all all connections
      lineinfile:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        regexp: '^(.*)host all all 0.0.0.0/0 md5(.*)$'
        state: absent

    - name: change pg_hba for local connections only
      lineinfile:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        regexp: '^(.*)(all|postgres) postgres 127.0.0.1/32 cert(.*)$'
        line: '    - hostssl all postgres 127.0.0.1/32 cert'
      become_user: postgres
  
  become: true
  when: ssl_pg_hba.stdout_lines|length > 0 and patroni

  rescue:

    - name: revert old patroni configuration file
      copy:
        src: "{{ backup.patroni }}{{ patroni_files.conf_dir }}/postgres.yml"
        dest: "{{ patroni_files.conf_dir }}/postgres.yml"
        owner: postgres
        group: postgres
        mode: 0600
        remote_src: yes

  always:

    - name: send reload command to patroni
      include_role:
        name: patroni
        tasks_from: update_with_patronictl
      vars:
        endpoint_name: reload

    - name: wait when pgsql open port
      shell: '{{ PGHOME_OLD }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ PGPORT_OLD }}'
      register: result
      until: result.stdout.find("accepting connections") != -1
      retries: 60
      delay: 1
      become_user: postgres

- name: Change postgresql.conf for ssl 
  block:

    - name: backup old files
      include_role:
        name: common
        tasks_from: backup_all

    - name: generate certificates
      include_role:
        name: postgresql
        tasks_from: generate_certs.yml

    - name: insert ssl block to postgresql config
      lineinfile:
        path: '{{ PGDATA_OLD }}/postgresql.conf'
        insertafter: "synchronous_commit = 'on'"
        line: "ssl = 'on'\n\
               ssl_cert_file = '{{ PGSSL }}/{{ ansible_fqdn }}.crt'\n\
               ssl_key_file = '{{ PGSSL }}/{{ ansible_fqdn }}.key'\n\
               ssl_ca_file = '{{ PGSSL }}/root.crt'"

    - name: delete pg_hba for all all connections
      lineinfile:
        path: '{{ PGDATA_OLD }}/pg_hba.conf'
        regexp: '^(.*)host all all 0.0.0.0/0 md5(.*)$'
        state: absent

    - name: change pg_hba for local connections only
      lineinfile:
        path: '{{ PGDATA_OLD }}/pg_hba.conf'
        regexp: '^(.*)(all|postgres) postgres 127.0.0.1/32 md5(.*)$'
        line: 'hostssl all postgres 127.0.0.1/32 cert'

    - name: insert ssl block to pg_hba config
      lineinfile:
        path: '{{ PGDATA_OLD }}/pg_hba.conf'
        insertafter: 'hostssl all postgres 127.0.0.1/32 cert'
        line: "hostssl all postgres {{ hostvars['master'].ansible_default_ipv4.address | ipaddr('network/prefix') }} cert"
      when: installation_type == 'standalone'
        
  become: true
  when: not ssl.message and not patroni

  rescue:

    - name: set fail status
      set_fact:
        ssl_failure: "{{ control_name }}.FAIL__SSL не был настроен корректно. Возможно в кандидате на обновление уже был ранее настроен SSL. Для продолжения обновления необходимо удалить настройки БД, связанные с ssl и повторить запуск обновления.__{{ control_name }}.FAIL"

    - name: revert old postgresql configuration files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: postgres
        group: postgres
        mode: 0600
        remote_src: yes
      with_items:
        - { src: '{{ backup.postgresql }}{{ PGDATA_OLD }}/postgresql.conf',  dest: '{{ PGDATA_OLD }}/postgresql.conf' }
        - { src: '{{ backup.postgresql }}{{ PGDATA_OLD }}/pg_hba.conf',      dest: '{{ PGDATA_OLD }}/pg_hba.conf' }

    - name: delete postgres certificates
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ PGSSL }}/root.crt"
        - "{{ PGSSL }}/{{ ansible_fqdn }}.key"
        - "{{ PGSSL }}/client.key"

  always:

    - name: send reload command to postgresql
      shell: "{{ PGHOME_OLD }}/bin/pg_ctl reload -D {{ PGDATA_OLD }}"
      become_user: postgres

    - name: wait when pgsql open port
      shell: '{{ PGHOME_OLD }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ PGPORT_OLD }}'
      register: result
      until: result.stdout.find("accepting connections") != -1
      retries: 60
      delay: 1
      become_user: postgres

- name: Change patroni config for ssl 
  block:

    - name: backup old files
      include_role:
        name: common
        tasks_from: backup_all

    - name: generate certificates
      include_role:
        name: postgresql
        tasks_from: generate_certs.yml

    - name: replace password with ssl required params
      replace:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        regexp: '^(.*)            password:(.*)$'
        replace: "            sslmode: require\n            \
                              sslkey: {{ pg_certs.ssl_key }}\n            \
                              sslcert: {{ pg_certs.ssl_cert }}\n            \
                              sslrootcert: {{ PGSSL }}/root.crt"

    - name: insert ssl block to postgresql config
      lineinfile:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        insertafter: "synchronous_commit: 'on'"
        line: "        ssl: 'on'\n        \
                       ssl_cert_file: {{ PGSSL }}/{{ ansible_fqdn }}.crt\n        \
                       ssl_key_file: {{ PGSSL }}/{{ ansible_fqdn }}.key\n        \
                       ssl_ca_file: {{ PGSSL }}/root.crt"

    - name: delete pg_hba for all all connections
      lineinfile:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        regexp: '^(.*)host all all 0.0.0.0/0 md5(.*)$'
        state: absent

    - name: change pg_hba for local connections only
      lineinfile:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        regexp: '^(.*)(all|postgres) postgres 127.0.0.1/32 md5(.*)$'
        line: '    - hostssl all postgres 127.0.0.1/32 cert'
        backrefs: yes

    - name: insert ssl block to pg_hba config
      lineinfile:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        insertafter: '    - hostssl all postgres 127.0.0.1/32 cert'
        line: "    - hostssl all postgres {{ hostvars['master'].ansible_default_ipv4.address | ipaddr('network/prefix') }} cert\n    \
                   - hostssl all postgres {{ hostvars['replica'].ansible_default_ipv4.address | ipaddr('network/prefix') }} cert"
      when: installation_type == 'cluster'

    - name: insert ssl block to pg_hba config
      lineinfile:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        insertafter: '    - hostssl all postgres 127.0.0.1/32 cert'
        line: "    - hostssl all postgres {{ hostvars['master'].ansible_default_ipv4.address | ipaddr('network/prefix') }} cert"
      when: installation_type == 'standalone'

    - name: change pg_hba for replication local connections
      lineinfile:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        regexp: '^(.*)    - host replication postgres 127.0.0.1/32 md5(.*)$'
        line: '    - hostssl replication postgres 127.0.0.1/32 cert'
        backrefs: yes

    - name: change pg_hba for replication master connections
      lineinfile:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        regexp: "^(.*)    - host replication postgres {{ hostvars['master'].ansible_default_ipv4.address | ipaddr('network/prefix') }} md5(.*)$"
        line: "    - hostssl replication postgres {{ hostvars['master'].ansible_default_ipv4.address | ipaddr('network/prefix') }} cert"
        backrefs: yes

    - name: change pg_hba for replication replica connections
      lineinfile:
        path: '{{ patroni_files.conf_dir }}/postgres.yml'
        regexp: "^(.*)    - host replication postgres {{ hostvars['replica'].ansible_default_ipv4.address | ipaddr('network/prefix') }} md5(.*)$"
        line: "    - hostssl replication postgres {{ hostvars['replica'].ansible_default_ipv4.address | ipaddr('network/prefix') }} cert"
        backrefs: yes
      when: installation_type == 'cluster'
        
  become: true
  when: not ssl.message and patroni

  rescue:
    
    - name: set fail status
      set_fact:
        ssl_failure: "{{ control_name }}.FAIL__SSL не был настроен корректно. Возможно в кандидате на обновление уже был ранее настроен SSL. Для продолжения обновления необходимо удалить настройки БД, связанные с ssl и повторить запуск обновления.__{{ control_name }}.FAIL"

    - name: revert old patroni configuration file
      copy:
        src: "{{ backup.patroni }}{{ patroni_files.conf_dir }}/postgres.yml"
        dest: "{{ patroni_files.conf_dir }}/postgres.yml"
        owner: postgres
        group: postgres
        mode: 0600
        remote_src: yes

    - name: delete postgres certificates
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ PGSSL }}/root.crt"
        - "{{ PGSSL }}/{{ ansible_fqdn }}.key"
        - "{{ PGSSL }}/client.key"

  always:

    - name: send reload command to patroni
      include_role:
        name: patroni
        tasks_from: update_with_patronictl
      vars:
        endpoint_name: reload

    - name: wait when pgsql open port
      shell: '{{ PGHOME_OLD }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ PGPORT_OLD }}'
      register: result
      until: result.stdout.find("accepting connections") != -1
      retries: 60
      delay: 1
      become_user: postgres