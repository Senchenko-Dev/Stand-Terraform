- name: change password for {{ database_user }} user in database
  block:

    - name: define variables for below tasks
      set_fact:
        passwords_history: false
      when: passwords_history is undefined

    - name: disable needed policy parameter for update password
      block:

        - name: get reuse time of password policy for {{ database_user }} user
          postgresql_query:
            port: "{{ ports.pg }}"
            query: SELECT reuse_time,in_history,max_age,min_age,policy_enable FROM recognize_password_policy('{{ database_user }}')
          register: previous_user_pp_items

        - name: save user pp data
          set_fact: 
            _changereusepass_save_reuse_time: "{{ item.reuse_time }}"
            _changereusepass_save_in_history: "{{ item.in_history }}"
            _changereusepass_save_max_age: "{{ item.max_age }}"
            _changereusepass_save_min_age: "{{ item.min_age }}"
            _changereusepass_save_policy_enable: "{{ item.policy_enable }}"
          loop: '{{ previous_user_pp_items.query_result }}'

        - name: define previous value of reuse time parameter if length of result is empty string
          set_fact:
            _changereusepass_save_reuse_time: "365 days"
          when: "_changereusepass_save_reuse_time | length <= 2"

        - name: define previous value of in_history parameter if length of result is empty string
          set_fact:
            _changereusepass_save_in_history: "0"
          when: "_changereusepass_save_in_history | length <= 2"

        - name: define previous value of max_age parameter if length of result is empty string
          set_fact:
            _changereusepass_save_max_age: "0"
          when: "_changereusepass_save_max_age | length <= 2"

        - name: define previous value of min_age parameter if length of result is empty string
          set_fact:
            _changereusepass_save_min_age: "0"
          when: "_changereusepass_save_min_age | length <= 2"

        - name: define previous value of policy_enable parameter if length of result is empty string
          set_fact:
            _changereusepass_save_policy_enable: "false"
          when: "_changereusepass_save_policy_enable == ''"

        - name: disable password policy parameter
          postgresql_query:
            port: "{{ ports.pg }}"
            query: SELECT * FROM set_role_policies('{{ database_user }}', in_history('0'), reuse_time('0'), max_age('0'),
                    min_age('0'), policy_enable ('true'))

      when: passwords_history

    - name: enable password policy parameter
      postgresql_query:
        port: "{{ ports.pg }}"
        query: SELECT * FROM set_role_policies('{{ database_user }}',
                in_history('{{ _changereusepass_save_in_history }}'), reuse_time('{{ _changereusepass_save_reuse_time }}'),
                max_age('{{ _changereusepass_save_max_age }}'), min_age('{{ _changereusepass_save_min_age }}'),
                policy_enable ('{{ _changereusepass_save_policy_enable }}'))
      when: not passwords_history

  environment:
    - PGHOST: "{{ ansible_fqdn }}"
    - PGSSLCERT: "{{ pg_certs.ssl_cert }}"
    - PGSSLKEY: "{{ pg_certs.ssl_key }}"
  become: true
  become_user: postgres
  when: inventory_hostname == 'master' and inner_install is undefined