- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

- name: Change postgres password and turn on password policy
  block:

    - name: enable password policy on cluster
      block:

        - name: define current master role of the cluster
          include_role:
            name: patroni
            tasks_from: update_define_roles_of_nodes
          run_once: true

        - name: change roles of cluster members
          include_role:
            name: patroni
            tasks_from: update_run_switchover
          vars:
            current_database_port: "{{ ports.pg }}"
          run_once: true
          when: current_master != hostvars['master'].ansible_fqdn

        - name: change password of database user
          include_role:
            name: configure
            tasks_from: update_user_pass
          vars:
            username: postgres
            password: '{{ postgres_db_scram_pass }}'

        - name: enable password policy on cluster when action_type is update
          block:

            - name: enable password policy on replica
              block:

                - name: enable password policy
                  import_tasks: enable_password_policy.yml

                - name: Define current master role of the cluster
                  include_role:
                    name: patroni
                    tasks_from: update_define_roles_of_nodes

                - name: Change roles of cluster members
                  include_role:
                    name: patroni
                    tasks_from: update_run_switchover
                  vars:
                    current_database_port: "{{ ports.pg }}"

              when: inventory_hostname == 'replica'

            - name: enable password policy on master
              block:

                - name: enable password policy
                  import_tasks: enable_password_policy.yml

                - name: Define current master role of the cluster
                  include_role:
                    name: patroni
                    tasks_from: update_define_roles_of_nodes

                - name: Change roles of cluster members
                  include_role:
                    name: patroni
                    tasks_from: update_run_switchover
                  vars:
                    current_database_port: "{{ ports.pg }}"

              when: inventory_hostname == 'master'

          when: action_type == 'update_minor'

        - name: enable password policy on cluster when action_type is install
          import_tasks: enable_password_policy.yml
          when: action_type == 'install'

      when: patroni

    - name: enable password policy on standalone
      block:

        - name: change password of database user
          include_role:
            name: configure
            tasks_from: update_user_pass
          vars:
            username: postgres
            password: '{{ postgres_db_scram_pass }}'

        - name: stop db daemon
          service:
            name: postgresql
            state: stopped
          become_user: root

        - name: remove commented psql_encrypt_password parameter from patroni configuration file
          lineinfile:
            path: "{{ PGDATA }}/postgresql.conf"
            regexp: '\#psql_encrypt_password'
            state: absent

        - name: turn off allow_hashed_password parameter in patroni configuration file
          lineinfile:
            path: "{{ PGDATA }}/postgresql.conf"
            regexp: 'password_policy.allow_hashed_password'
            line: "password_policy.allow_hashed_password = 'off'"

        - name: delete part of pg_hba
          lineinfile:
            path: "{{ PGDATA }}/pg_hba.conf"
            regexp: "local all all md5"
            state: absent

        - name: wait when pgsql open port
          shell: 'sed -i "s/,\s*{{ as_group }}//g" {{ PGDATA }}/pg_hba.conf'

        - name: start db daemon
          service:
            name: postgresql
            state: started
          become_user: root

        - name: wait when pgsql open port
          shell: '{{ PGHOME }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ ports.pg }}'
          register: result
          until: result.stdout.find("accepting connections") != -1
          retries: 60
          delay: 1

      when: not patroni

    - name: set python interpretator
      set_fact:
        ansible_python_interpreter: '{{ python.global_bin_2 }}'

  become_user: postgres
  become: true