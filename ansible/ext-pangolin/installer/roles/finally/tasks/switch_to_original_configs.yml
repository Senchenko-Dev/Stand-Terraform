- name: Define current PGDATA and PGHOME
  set_fact:
    _rstr_cnfgs_pgdata: "{% if 'update' in action_type and not postgres %}\
                            {{ PGDATA_OLD }}\
                          {% else %}\
                            {{ PGDATA }}\
                          {% endif %}"
    _rstr_cnfgs_pghome: "{% if 'update' in action_type and not postgres %}\
                            {{ PGHOME_OLD }}\
                          {% else %}\
                            {{ PGHOME }}\
                          {% endif %}"

- name: Restore original configs
  block:

  - name: сheck exists pgbouncer
    stat:
      path: "{{ pgbouncer_files.bin_path }}"
    register: pgbouncer_exists

  - name: сheck exists patroni
    stat: path="{{ patroni_files.service_file }}"
    register: patroni_exists

  - name: restore original merged configs if action update
    block:

    - name: apply postgresql.conf, pg_hba.conf
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: postgres
        group: postgres
        remote_src: yes
        mode: 0600
      with_items:
        - { src: '{{ merge_cfg.result_pgse }}/pg_hba.conf',      dest: '{{ _rstr_cnfgs_pgdata }}/pg_hba.conf' }
        - { src: '{{ merge_cfg.result_pgse }}/postgresql.conf',  dest: '{{ _rstr_cnfgs_pgdata }}/postgresql.conf' }

    - name: apply pgbouncer.ini
      copy:
        src: "{{ merge_cfg.pgbouncer }}/pgbouncer.ini"
        dest: "{{ pgbouncer_files.conf_dir }}/pgbouncer.ini"
        owner: postgres
        group: postgres
        mode: 0600
        remote_src: yes
      when: pgbouncer_exists.stat.exists

    - name: apply patroni.yml
      copy:
        src: "{% if patroni %}\
                   {{ merge_cfg.result_pgse_patroni }}\
              {% else %}\
                   {{ merge_cfg.result_pgse }}\
              {% endif %}/postgres.yml"
        dest: "{{ patroni_files.conf_dir }}/postgres.yml"
        owner: postgres
        group: postgres
        mode: 0600
        remote_src: true
      when: patroni_exists.stat.exists

    when: "action_type in ['update_major', 'update_minor']"

  - name: restore original configs from template if action install
    block:

    - name: apply postgresql.conf
      template:
        src: "{{ playbook_dir }}/roles/postgresql/templates/postgresql.conf.j2"
        dest: "{{ _rstr_cnfgs_pgdata }}/postgresql.conf"
        owner: postgres
        group: postgres
        mode: 0600
        trim_blocks: False

    - name: apply pg_hba.conf
      template:
        src: "{{ playbook_dir }}/roles/postgresql/templates/pg_hba.conf.j2"
        dest: "{{ _rstr_cnfgs_pgdata }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0600

    - name: apply pgbouncer.ini
      template:
        src: "{{ playbook_dir }}/roles/pgbouncer/templates/pgbouncer.ini.j2"
        dest: "{{ pgbouncer_files.conf_dir }}/pgbouncer.ini"
        owner: postgres
        group: postgres
        mode: 0600
        trim_blocks: False
      when: pgbouncer_exists.stat.exists

    - name: apply patroni.yml
      template:
        src: "{{ playbook_dir }}/roles/patroni/templates/postgres.yml.j2"
        dest: "{{ patroni_files.conf_dir }}/postgres.yml"
        owner: postgres
        group: postgres
        mode: 0600
        trim_blocks: False
      when: patroni_exists.stat.exists

    when: action_type == 'install'

  - name: send reload command to postgresql
    shell: "{{ _rstr_cnfgs_pghome }}/bin/pg_ctl reload -D {{ _rstr_cnfgs_pgdata }}"
    become_user: postgres
    when: not patroni_exists.stat.exists

  - name: send reload command to patroni
    include_role:
      name: patroni
      tasks_from: update_with_patronictl
    vars:
      endpoint_name: reload
    when: patroni_exists.stat.exists

  - name: restarted systemd and start service
    systemd:
      name: pgbouncer
      state: restarted
      daemon_reload: yes
      enabled: yes
    when: pgbouncer_exists.stat.exists

  - name: wait when pgsql open port
    shell: '{{ _rstr_cnfgs_pghome }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ ports.pg }}'
    register: result
    until: result.stdout.find("accepting connections") != -1
    retries: 6
    delay: 10
    become_user: postgres

  become: true
  when: inventory_hostname != 'etcd'