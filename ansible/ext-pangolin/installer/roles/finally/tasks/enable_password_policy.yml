- name: Enable password policy
  block:

    - name: stop patroni linux service
      service:
        name: patroni
        state: stopped
      become_user: root

    - name: remove commented psql_encrypt_password parameter from patroni configuration file
      lineinfile:
        path: "{{ patroni_files.conf_dir }}/postgres.yml"
        regexp: '\#psql_encrypt_password'
        state: absent

    - name: turn off allow_hashed_password parameter in patroni configuration file
      lineinfile:
        path: "{{ patroni_files.conf_dir }}/postgres.yml"
        regexp: 'password_policy.allow_hashed_password'
        line: "        password_policy.allow_hashed_password: 'off'"

    - name: delete few strings from pg_hba
      lineinfile:
        path: "{{ patroni_files.conf_dir }}/postgres.yml"
        regexp: "local all all md5"
        state: absent

    - name: wait when pgsql open port
      shell: 'sed -i "s/,\s*{{ as_group }}//g" {{ patroni_files.conf_dir }}/postgres.yml'

    - name: start patroni service if action type is update
      block:

        - name: start patroni linux service
          service:
            name: patroni
            state: started
          become_user: root

        - name: wait when pgsql open port
          shell: '{{ PGHOME }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ ports.pg }}'
          register: result
          until: result.stdout.find("accepting connections") != -1
          retries: 60
          delay: 1

      when: action_type == 'update_minor'

    - name: start patroni service if action type is install
      block:

        - name: start patroni on master
          block:

            - name: start patroni linux service
              service:
                name: patroni
                state: started
              become_user: root

            - name: wait when pgsql open port
              shell: '{{ PGHOME }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ ports.pg }}'
              register: result
              until: result.stdout.find("accepting connections") != -1
              retries: 60
              delay: 1

          when: inventory_hostname == 'master'

        - name: start patroni on replica
          block:

            - name: start patroni linux service
              service:
                name: patroni
                state: started
              become_user: root

            - name: wait when pgsql open port
              shell: '{{ PGHOME }}/bin/pg_isready -h {{ ansible_fqdn }} -p {{ ports.pg }}'
              register: result
              until: result.stdout.find("accepting connections") != -1
              retries: 60
              delay: 1

          when: inventory_hostname == 'replica'

      when: action_type == 'install'

  become: true
  become_user: postgres