- name: Check certificates
  block:

    - name: check server certificates exist
      stat:
        path: "{{ main_cert_file }}"
      loop:
        - "{{ pg_certs_pwd.root_ca }}"
        - "{{ pg_certs_pwd.server_cert }}"
        - "{{ pg_certs_pwd.server_key }}"
      loop_control:
        loop_var: main_cert_file
      register: main_cert

    - name: print error if server and root certificates not present
      assert:
        that: item.stat.exists
        fail_msg: "{{ message_installer.fails.check_exist_root_cert.format(item.main_cert_file) }}"
      loop: "{{ main_cert.results }}"

    - name: cheсk server certificates
      include_tasks: check_certificates_params.yml
      vars:
        crt_file: "{{ pg_certs_pwd.server_cert }}"
        key_file: "{{ pg_certs_pwd.server_key }}"
        common_name: "{{ ansible_fqdn }}"

    - name: set owner postgres for server certificates
      file:
        path: "{{ item.stat.path }}"
        owner: postgres
        group: postgres
      loop: "{{ main_cert.results }}"

    - name: check components and users certificates
      block:

        - name: define list of certificates
          set_fact:
            list_cetrs_files: "['{{ pg_certs_pwd.postgres_cert }}','{{ pg_certs_pwd.postgres_key }}','{{ pg_certs_pwd.pgbouncer_cert }}','{{ pg_certs_pwd.pgbouncer_key }}'
                              {% if 'patroni' in tag %},'{{ pg_certs_pwd.patroni_cert }}','{{ pg_certs_pwd.patroni_key }}','{{ pg_certs_pwd.patronietcd_cert }}',
                              '{{ pg_certs_pwd.patronietcd_key }}'{% endif %}{% if 'haproxy' in tag %},'{{ pg_certs_pwd.haproxy_cert }}'{% endif %}]"

        - name: check certificates exist
          stat:
            path: "{{ cert_file }}"
          loop: "{{ list_cetrs_files }}"
          loop_control:
            loop_var: cert_file
          register: component_cert

        - name: print message if components certificates not exits
          assert:
            that: item.stat.exists
            fail_msg: "{{ message_installer.fails.check_exist_user_cert.format(item.cert_file, custom_config) }}"
          loop: "{{ component_cert.results }}"

        - name: cheсk postgres and pgbouncer client certificates
          include_tasks: check_certificates_params.yml
          vars:
            crt_file: "{{ item.cert }}"
            key_file: "{{ item.key }}"
            common_name: "{{ item.cn }}"
          with_items:
            - { cert: "{{ pg_certs_pwd.postgres_cert }}", key: "{{ pg_certs_pwd.postgres_key }}", cn: postgres }
            - { cert: "{{ pg_certs_pwd.pgbouncer_cert }}", key: "{{ pg_certs_pwd.pgbouncer_key }}", cn: pgbouncer }

        - name: cheсk patroni and patronietcd certificates
          include_tasks: check_certificates_params.yml
          vars:
            crt_file: "{{ item.cert }}"
            key_file: "{{ item.key }}"
            common_name: "{{ item.cn }}"
          with_items:
            - { cert: "{{ pg_certs_pwd.patroni_cert }}", key: "{{ pg_certs_pwd.patroni_key }}", cn: patroni }
            - { cert: "{{ pg_certs_pwd.patronietcd_cert }}", key: "{{ pg_certs_pwd.patronietcd_key }}", cn: patronietcd }
          when: "'patroni' in tag"

        - name: set owner postgres for components certificates
          file:
            path: "{{ item.stat.path }}"
            owner: postgres
            group: postgres
          loop: "{{ component_cert.results }}"

      when: inventory_hostname != 'etcd'

  become: true