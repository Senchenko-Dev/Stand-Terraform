- name: Prepare linux host
  block:

    - name: Check if /{{ PGDATA.split('/')[1] }} exists
      stat:
        path: "/{{ PGDATA.split('/')[1] }}"
      register: pgdata_exists

    - name: update package lists
      command:
        cmd: "apt-get update"
      become: true
      when: ansible_os_family == 'Altlinux'

    # When deploing on clean machine ansible "package" module not available, because python-module-rpm no installed. Install it manually.
    - name: install required packages on new machine Alt
      command:
        cmd: "apt-get -y install python-module-rpm python3-module-rpm python-module-pip python3-module-pip"
      become: true
      when: ansible_os_family == 'Altlinux'

    - name: gather packages info
      package_facts:
        manager: "auto"
      no_log: "{{ nolog }}"

    - name: add repos
      yum_repository:
        name:        "{{ item.name }}"
        description: "{{ item.name }}"
        file:        "{{ item.file }}"
        baseurl:     "{{ item.baseurl }}"
        enabled:      yes
        gpgcheck:     no
      with_items: "{{ linux_repos }}"
      when: (ansible_os_family == "RedHat") and item.enabled

    - name: include vars
      include_vars:
        file: "{% if ansible_os_family == 'RedHat' %}\
                required_packages-rhel.yml\
              {% elif ansible_os_family == 'Altlinux' %}\
                required_packages-altlinux.yml\
              {% elif ansible_os_family == 'Debian' %}\
                required_packages-ubuntu.yml\
              {% endif %}"

    - name: install packages
      package:
        state: present
        name: "{{ item }}"
      with_items: "{{ required_packages }}"
      register: result_install_list

    - name: allow loading modules from custom directories
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ alt_security_dir }}/python-trust"
        - "{{ alt_security_dir }}/perl-trust"
      when: ansible_os_family == "Altlinux"

    - name: create OS user and group postgres for all nodes
      block:

        - name: create postgres group
          group:
            name: postgres
            state: present

        - name: create postgres user on etcd host
          user:
            name: postgres
            group: postgres
            comment: User for PostgreSQL database

    - name: clear remote tmp directory
      file:
        path: "{{ REMOTE_TMP }}"
        state: absent

    - name: create remote tmp directory
      file:
        path: "{{ REMOTE_TMP }}"
        state: directory
        mode: '0700'
        owner: postgres
        group: postgres
        recurse: yes

  become: true