- name: Set current Pangolin version without zeros
  set_fact:
    pg_current_version_without_zeros: "{{ pg_current_version.split('.').0 | int }}.{{ pg_current_version.split('.').1 | int }}.{{ pg_current_version.split('.').2 | int }}"

- name: Set Pangolin version without zeros
  set_fact:
    pg_version_without_zeros: "{{ pg_version.split('.').0 | int }}.{{ pg_version.split('.').1 | int }}.{{ pg_version.split('.').2 | int }}"

- name: Define version of current python interpreter
  set_fact:
    previous_python_interpreter: "{{ ansible_python_interpreter }}"

- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ python.postgresql_venv }}/bin/python3'

- name: Get current value security administrator and tde
  block:

    - name: request to get the status of enabling the security administrator and tde
      postgresql_query:
        port: "{{ PGPORT_OLD }}"
        query: SELECT check_admin_protect_is_on(), check_tde_is_on();
      ignore_errors: yes
      register: query_current_admin_protect_and_tde

    - name: set variables
      set_fact:
        current_admin_protect: "{% if query_current_admin_protect_and_tde.statusmessage is defined \
                                      and query_current_admin_protect_and_tde.statusmessage == \"SELECT 1\" %}\
                                        {{ query_current_admin_protect_and_tde.query_result.0.check_admin_protect_is_on }}\
                                {% else %}false\
                                {% endif %}"
        current_tde: "{% if query_current_admin_protect_and_tde.statusmessage is defined \
                            and query_current_admin_protect_and_tde.statusmessage == \"SELECT 1\" %}\
                              {{ query_current_admin_protect_and_tde.query_result.0.check_tde_is_on }}\
                      {% else %}false\
                      {% endif %}"

  environment: "{{ db_connection_args }}"
  become: true
  become_user: postgres

- name: Include update variables
  include_vars:
    file: "group_vars/update_version_matrix.yml"
  no_log: "{{ nolog }}"

- name: Adding an error to the scout_error_list_assert if the current version was not found in the available for update (no supported version found)
  set_fact:
    scout_error_list_assert: "{{ scout_error_list_assert + [item] }}"
  no_log: "{{ nolog }}"
  run_once: true
  with_items:
    - "{{ scout_control_msgs.fails.no_supported_version_found | replace('pg_current_version',pg_current_version) }}"
  when: "pg_current_version_without_zeros not in list_versions_to_update"

- name: Print message if the current version was not found in the available for update (no supported version found)
  assert:
    that: "pg_current_version_without_zeros in list_versions_to_update"
    fail_msg: "current version was not found in the available for update (no supported version found)"
  run_once: true

- name: Set update_type/pg_upgrade_mode
  set_fact:
    update_type: "{{ item.update_type }}"
    pg_upgrade_mode: "{{ item.pg_upgrade_mode }}"
  loop: "{{ update_version_matrix.table |
            selectattr('to', 'equalto', pg_version_without_zeros) |
            selectattr('admin_protection', 'equalto', current_admin_protect) |
            selectattr('tde', 'equalto', current_tde) | list}}"
  when: "pg_current_version_without_zeros in item.from"

- name: Adding an error to the scout_error_list_assert if update_type undefined (no supported new version)
  set_fact:
    scout_error_list_assert: "{{ scout_error_list_assert + [item] }}"
  no_log: "{{ nolog }}"
  run_once: true
  with_items:
    - "{{ scout_control_msgs.fails.no_supported_new_version }}"
  when: update_type is undefined

- name: Print message if update_type undefined (no supported new version)
  assert:
    that: update_type is defined
    fail_msg: "update_type undefined (no supported new version)"
  run_once: true

- name: Adding an error to the scout_error_list_assert if pg_upgrade_mode undefined
  set_fact:
    scout_error_list_assert: "{{ scout_error_list_assert + [item] }}"
  no_log: "{{ nolog }}"
  run_once: true
  with_items:
    - "{{ scout_control_msgs.fails.pg_upgrade_mode_not_exists }}"
  when: pg_upgrade_mode is undefined

- name: Print message if pg_upgrade_mode undefined
  assert:
    that: pg_upgrade_mode is defined
    fail_msg: "pg_upgrade_mode undefined"
  run_once: true

- name: Adding an error to the scout_error_list_assert if update_type unsupported
  set_fact:
    scout_error_list_assert: "{{ scout_error_list_assert + [item] }}"
  no_log: "{{ nolog }}"
  run_once: true
  with_items:
    - "{{ scout_control_msgs.fails.unsupported_version | replace('pg_current_version',pg_current_version) }}"
  when: update_type == "unsupported"

- name: Print message if update_type unsupported
  assert:
    that: update_type != "unsupported"
    fail_msg: "update_type unsupported"
  run_once: true

- name: Set action_type
  set_fact:
    action_type: "{{ update_type }}"

- name: Set python interpretator
  set_fact:
    ansible_python_interpreter: '{{ previous_python_interpreter }}'