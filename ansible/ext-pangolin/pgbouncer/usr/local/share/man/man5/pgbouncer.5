.TH "PGBOUNCER.INI" "5" "" "1.16.0" "Databases"
.SH NAME
.PP
pgbouncer.ini \- configuration file for pgbouncer
.SH DESCRIPTION
.PP
The configuration file is in "ini" format.
Section names are between "[" and "]".
Lines starting with ";" or "#" are taken as comments and ignored.
The characters ";" and "#" are not recognized as special when they
appear later in the line.
.SH GENERIC SETTINGS
.SS logfile
.PP
Specifies the log file.
For daemonization (\f[C]\-d\f[]), either this or \f[C]syslog\f[] need to
be set.
.PP
The log file is kept open, so after rotation \f[C]kill\ \-HUP\f[] or on
console \f[C]RELOAD;\f[] should be done.
On Windows, the service must be stopped and started.
.PP
Note that setting \f[C]logfile\f[] does not by itself turn off logging
to stderr.
Use the command\-line option \f[C]\-q\f[] or \f[C]\-d\f[] for that.
.PP
Default: not set
.SS pidfile
.PP
Specifies the PID file.
Without \f[C]pidfile\f[] set, daemonization (\f[C]\-d\f[]) is not
allowed.
.PP
Default: not set
.SS listen_addr
.PP
Specifies a list of addresses where to listen for TCP connections.
You may also use \f[C]*\f[] meaning "listen on all addresses".
When not set, only Unix socket connections are accepted.
.PP
Addresses can be specified numerically (IPv4/IPv6) or by name.
if use \f[C]0.0.0.0\f[] meaning "listen on IPv4 only" if use \f[C]::\f[]
meaning "listen on IPv6 only"
.PP
Default: not set
.SS listen_port
.PP
Which port to listen on.
Applies to both TCP and Unix sockets.
.PP
Default: 6432
.SS unix_socket_dir
.PP
Specifies location for Unix sockets.
Applies to both listening socket and server connections.
If set to an empty string, Unix sockets are disabled.
A value that starts with \f[C]\@\f[] specifies that a Unix socket in the
abstract namespace should be created (currently supported on Linux and
Windows).
.PP
For online reboot (\f[C]\-R\f[]) to work, a Unix socket needs to be
configured, and it needs to be in the file\-system namespace.
.PP
Default: /tmp (empty on Windows)
.SS unix_socket_mode
.PP
File system mode for Unix socket.
Ignored for sockets in the abstract namespace.
Not supported on Windows.
.PP
Default: 0777
.SS unix_socket_group
.PP
Group name to use for Unix socket.
Ignored for sockets in the abstract namespace.
Not supported on Windows.
.PP
Default: not set
.SS user
.PP
If set, specifies the Unix user to change to after startup.
Works only if PgBouncer is started as root or if it\[aq]s already
running as given user.
Not supported on Windows.
.PP
Default: not set
.SS auth_proxy
.PP
Enables/disables pass\-through authentication.
.PP
Default: off
.SS auth_failure_threshold
.PP
Maximum number of NOT authenticated times in a row client with identical
parameters: connection type, client address, database and username, at
which the authentication inactivity timer will be triggered for this
client.
.PP
Default: 0
.SS auth_inactivity_period
.PP
Authentication inactivity period (in seconds).
This is the time during which a client, previously NOT authenticated
more than N times in a row, when connecting with identical parameters:
connection type, client address, database and username, will be denied
service pgBouncer.
.PP
Default: 0
.SS auth_last_size
.PP
Sets the size of the cache with information about the last connected
users.
.PP
Default: 10
.SS log_audit
.PP
Enable/disable audit.
.PP
Default: disable \- off
.SS auth_file
.PP
The name of the file to load user names and passwords from.
See section Authentication file format (#authentication-file-format)
below about details.
.PP
Default: not set
.SS auth_hba_file
.PP
HBA configuration file to use when \f[C]auth_type\f[] is \f[C]hba\f[].
.PP
Default: not set
.SS auth_type
.PP
How to authenticate users.
.TP
.B pam
PAM is used to authenticate users, \f[C]auth_file\f[] is ignored.
This method is not compatible with databases using the
\f[C]auth_user\f[] option.
The service name reported to PAM is "pgbouncer".
\f[C]pam\f[] is not supported in the HBA configuration file.
.RS
.RE
.TP
.B hba
The actual authentication type is loaded from \f[C]auth_hba_file\f[].
This allows different authentication methods for different access paths,
for example: connections over Unix socket use the \f[C]peer\f[] auth
method, connections over TCP must use TLS.
.RS
.RE
.TP
.B cert
Client must connect over TLS connection with a valid client certificate.
The user name is then taken from the CommonName field from the
certificate.
.RS
.RE
.TP
.B md5
Use MD5\-based password check.
This is the default authentication method.
\f[C]auth_file\f[] may contain both MD5\-encrypted and plain\-text
passwords.
If \f[C]md5\f[] is configured and a user has a SCRAM secret, then SCRAM
authentication is used automatically instead.
.RS
.RE
.TP
.B scram\-sha\-256
Use password check with SCRAM\-SHA\-256.
\f[C]auth_file\f[] has to contain SCRAM secrets or plain\-text
passwords.
.RS
.RE
.TP
.B plain
The clear\-text password is sent over the wire.
Deprecated.
.RS
.RE
.TP
.B trust
No authentication is done.
The user name must still exist in \f[C]auth_file\f[].
.RS
.RE
.TP
.B any
Like the \f[C]trust\f[] method, but the user name given is ignored.
Requires that all databases are configured to log in as a specific user.
Additionally, the console database allows any user to log in as admin.
.RS
.RE
.SS auth_query
.PP
Query to load user\[aq]s password from database.
.PP
Direct access to pg_shadow requires admin rights.
It\[aq]s preferable to use a non\-superuser that calls a SECURITY
DEFINER function instead.
.PP
Note that the query is run inside the target database.
So if a function is used, it needs to be installed into each database.
.PP
Default:
\f[C]SELECT\ usename,\ passwd\ FROM\ pg_shadow\ WHERE\ usename=$1\f[]
.SS auth_user
.PP
If \f[C]auth_user\f[] is set, then any user not specified in
\f[C]auth_file\f[] will be queried through the \f[C]auth_query\f[] query
from pg_shadow in the database, using \f[C]auth_user\f[].
The password of \f[C]auth_user\f[] will be taken from
\f[C]auth_file\f[].
(If the \f[C]auth_user\f[] does not require a password then it does not
need to be defined in \f[C]auth_file\f[].)
.PP
Direct access to pg_shadow requires admin rights.
It\[aq]s preferable to use a non\-superuser that calls a SECURITY
DEFINER function instead.
.PP
Default: not set
.SS pool_mode
.PP
Specifies when a server connection can be reused by other clients.
.TP
.B session
Server is released back to pool after client disconnects.
Default.
.RS
.RE
.TP
.B transaction
Server is released back to pool after transaction finishes.
.RS
.RE
.TP
.B statement
Server is released back to pool after query finishes.
Transactions spanning multiple statements are disallowed in this mode.
.RS
.RE
.SS max_client_conn
.PP
Maximum number of client connections allowed.
When increased then the file descriptor limits should also be increased.
Note that the actual number of file descriptors used is more than
\f[C]max_client_conn\f[].
The theoretical maximum used is:
.IP
.nf
\f[C]
max_client_conn\ +\ (max\ pool_size\ *\ total\ databases\ *\ total\ users)
\f[]
.fi
.PP
if each user connects under its own user name to the server.
If a database user is specified in the connection string (all users
connect under the same user name), the theoretical maximum is:
.IP
.nf
\f[C]
max_client_conn\ +\ (max\ pool_size\ *\ total\ databases)
\f[]
.fi
.PP
The theoretical maximum should be never reached, unless somebody
deliberately crafts a special load for it.
Still, it means you should set the number of file descriptors to a
safely high number.
.PP
Search for \f[C]ulimit\f[] in your favorite shell man page.
Note: \f[C]ulimit\f[] does not apply in a Windows environment.
.PP
Default: 100
.SS default_pool_size
.PP
How many server connections to allow per user/database pair.
Can be overridden in the per\-database configuration.
.PP
Default: 20
.SS min_pool_size
.PP
Add more server connections to pool if below this number.
Improves behavior when usual load comes suddenly back after period of
total inactivity.
The value is effectively capped at the pool size.
.PP
Default: 0 (disabled)
.SS reserve_pool_size
.PP
How many additional connections to allow to a pool (see
\f[C]reserve_pool_timeout\f[]).
0 disables.
.PP
Default: 0 (disabled)
.SS reserve_pool_timeout
.PP
If a client has not been serviced in this many seconds, use additional
connections from the reserve pool.
0 disables.
.PP
Default: 5.0
.SS max_db_connections
.PP
Do not allow more than this many server connections per database
(regardless of user).
This considers the PgBouncer database that the client has connected to,
not the PostgreSQL database of the outgoing connection.
.PP
This can also be set per database in the \f[C][databases]\f[] section.
.PP
Note that when you hit the limit, closing a client connection to one
pool will not immediately allow a server connection to be established
for another pool, because the server connection for the first pool is
still open.
Once the server connection closes (due to idle timeout), a new server
connection will immediately be opened for the waiting pool.
.PP
Default: 0 (unlimited)
.SS max_user_connections
.PP
Do not allow more than this many server connections per user (regardless
of database).
This considers the PgBouncer user that is associated with a pool, which
is either the user specified for the server connection or in absence of
that the user the client has connected as.
.PP
This can also be set per user in the \f[C][users]\f[] section.
.PP
Note that when you hit the limit, closing a client connection to one
pool will not immediately allow a server connection to be established
for another pool, because the server connection for the first pool is
still open.
Once the server connection closes (due to idle timeout), a new server
connection will immediately be opened for the waiting pool.
.PP
Default: 0 (unlimited)
.SS server_round_robin
.PP
By default, PgBouncer reuses server connections in LIFO (last\-in,
first\-out) manner, so that few connections get the most load.
This gives best performance if you have a single server serving a
database.
But if there is TCP round\-robin behind a database IP address, then it
is better if PgBouncer also uses connections in that manner, thus
achieving uniform load.
.PP
Default: 0
.SS ignore_startup_parameters
.PP
By default, PgBouncer allows only parameters it can keep track of in
startup packets: \f[C]client_encoding\f[], \f[C]datestyle\f[],
\f[C]timezone\f[] and \f[C]standard_conforming_strings\f[].
All others parameters will raise an error.
To allow others parameters, they can be specified here, so that
PgBouncer knows that they are handled by the admin and it can ignore
them.
.PP
Default: empty
.SS disable_pqexec
.PP
Disable Simple Query protocol (PQexec).
Unlike Extended Query protocol, Simple Query allows multiple queries in
one packet, which allows some classes of SQL\-injection attacks.
Disabling it can improve security.
Obviously this means only clients that exclusively use the Extended
Query protocol will stay working.
.PP
Default: 0
.SS application_name_add_host
.PP
Add the client host address and port to the application name setting set
on connection start.
This helps in identifying the source of bad queries etc.
This logic applies only on start of connection.
If \f[C]application_name\f[] is later changed with SET, PgBouncer does
not change it again.
.PP
Default: 0
.SS conffile
.PP
Show location of current config file.
Changing it will make PgBouncer use another config file for next
\f[C]RELOAD\f[] / \f[C]SIGHUP\f[].
.PP
Default: file from command line
.SS service_name
.PP
Used on win32 service registration.
.PP
Default: pgbouncer
.SS job_name
.PP
Alias for \f[C]service_name\f[].
.SS stats_period
.PP
Sets how often the averages shown in various \f[C]SHOW\f[] commands are
updated and how often aggregated statistics are written to the log (but
see \f[C]log_stats\f[]).
[seconds]
.PP
Default: 60
.SH LOG SETTINGS
.SS syslog
.PP
Toggles syslog on/off.
On Windows, the event log is used instead.
.PP
Default: 0
.SS syslog_ident
.PP
Under what name to send logs to syslog.
.PP
Default: pgbouncer (program name)
.SS syslog_facility
.PP
Under what facility to send logs to syslog.
Possibilities: \f[C]auth\f[], \f[C]authpriv\f[], \f[C]daemon\f[],
\f[C]user\f[], \f[C]local0\-7\f[].
.PP
Default: daemon
.SS log_connections
.PP
Log successful logins.
.PP
Default: 1
.SS log_disconnections
.PP
Log disconnections with reasons.
.PP
Default: 1
.SS log_pooler_errors
.PP
Log error messages the pooler sends to clients.
.PP
Default: 1
.SS log_stats
.PP
Write aggregated statistics into the log, every \f[C]stats_period\f[].
This can be disabled if external monitoring tools are used to grab the
same data from \f[C]SHOW\f[] commands.
.PP
Default: 1
.SS verbose
.PP
Increase verbosity.
Mirrors the "\-v" switch on the command line.
Using "\-v \-v" on the command line is the same as \f[C]verbose=2\f[].
.PP
Default: 0
.SH CONSOLE ACCESS CONTROL
.SS admin_users
.PP
Comma\-separated list of database users that are allowed to connect and
run all commands on the console.
Ignored when \f[C]auth_type\f[] is \f[C]any\f[], in which case any user
name is allowed in as admin.
.PP
Default: empty
.SS stats_users
.PP
Comma\-separated list of database users that are allowed to connect and
run read\-only queries on the console.
That means all SHOW commands except SHOW FDS.
.PP
Default: empty
.SH CONNECTION SANITY CHECKS, TIMEOUTS
.SS server_reset_query
.PP
Query sent to server on connection release, before making it available
to other clients.
At that moment no transaction is in progress so it should not include
\f[C]ABORT\f[] or \f[C]ROLLBACK\f[].
.PP
The query is supposed to clean any changes made to the database session
so that the next client gets the connection in a well\-defined state.
The default is \f[C]DISCARD\ ALL\f[] which cleans everything, but that
leaves the next client no pre\-cached state.
It can be made lighter, e.g.
\f[C]DEALLOCATE\ ALL\f[] to just drop prepared statements, if the
application does not break when some state is kept around.
.PP
When transaction pooling is used, the \f[C]server_reset_query\f[] is not
used, as clients must not use any session\-based features as each
transaction ends up in a different connection and thus gets a different
session state.
.PP
Default: DISCARD ALL
.SS server_reset_query_always
.PP
Whether \f[C]server_reset_query\f[] should be run in all pooling modes.
When this setting is off (default), the \f[C]server_reset_query\f[] will
be run only in pools that are in sessions\-pooling mode.
Connections in transaction\-pooling mode should not have any need for a
reset query.
.PP
This setting is for working around broken setups that run applications
that use session features over a transaction\-pooled PgBouncer.
It changes non\-deterministic breakage to deterministic breakage:
Clients always lose their state after each transaction.
.PP
Default: 0
.SS server_check_delay
.PP
How long to keep released connections available for immediate re\-use,
without running sanity\-check queries on it.
If 0 then the query is ran always.
.PP
Default: 30.0
.SS server_check_query
.PP
Simple do\-nothing query to check if the server connection is alive.
.PP
If an empty string, then sanity checking is disabled.
.PP
Default: SELECT 1;
.SS server_fast_close
.PP
Disconnect a server in session pooling mode immediately or after the end
of the current transaction if it is in "close_needed" mode (set by
\f[C]RECONNECT\f[], \f[C]RELOAD\f[] that changes connection settings, or
DNS change), rather than waiting for the session end.
In statement or transaction pooling mode, this has no effect since that
is the default behavior there.
.PP
If because of this setting a server connection is closed before the end
of the client session, the client connection is also closed.
This ensures that the client notices that the session has been
interrupted.
.PP
This setting makes connection configuration changes take effect sooner
if session pooling and long\-running sessions are used.
The downside is that client sessions are liable to be interrupted by a
configuration change, so client applications will need logic to
reconnect and reestablish session state.
But note that no transactions will be lost, because running transactions
are not interrupted, only idle sessions.
.PP
Default: 0
.SS server_lifetime
.PP
The pooler will close an unused server connection that has been
connected longer than this.
Setting it to 0 means the connection is to be used only once, then
closed.
[seconds]
.PP
Default: 3600.0
.SS server_idle_timeout
.PP
If a server connection has been idle more than this many seconds it will
be dropped.
If 0 then timeout is disabled.
[seconds]
.PP
Default: 600.0
.SS server_connect_timeout
.PP
If connection and login won\[aq]t finish in this amount of time, the
connection will be closed.
[seconds]
.PP
Default: 15.0
.SS server_login_retry
.PP
If login failed, because of failure from connect() or authentication
that pooler waits this much before retrying to connect.
[seconds]
.PP
Default: 15.0
.SS client_login_timeout
.PP
If a client connects but does not manage to log in in this amount of
time, it will be disconnected.
Mainly needed to avoid dead connections stalling SUSPEND and thus online
restart.
[seconds]
.PP
Default: 60.0
.SS autodb_idle_timeout
.PP
If the automatically created (via "*") database pools have been unused
this many seconds, they are freed.
The negative aspect of that is that their statistics are also forgotten.
[seconds]
.PP
Default: 3600.0
.SS dns_max_ttl
.PP
How long the DNS lookups can be cached.
If a DNS lookup returns several answers, PgBouncer will robin\-between
them in the meantime.
The actual DNS TTL is ignored.
[seconds]
.PP
Default: 15.0
.SS dns_nxdomain_ttl
.PP
How long error and NXDOMAIN DNS lookups can be cached.
[seconds]
.PP
Default: 15.0
.SS dns_zone_check_period
.PP
Period to check if a zone serial has changed.
.PP
PgBouncer can collect DNS zones from host names (everything after first
dot) and then periodically check if the zone serial changes.
If it notices changes, all host names under that zone are looked up
again.
If any host IP changes, its connections are invalidated.
.PP
Works only with UDNS and c\-ares backends (\f[C]\-\-with\-udns\f[] or
\f[C]\-\-with\-cares\f[] to configure).
.PP
Default: 0.0 (disabled)
.SS resolv_conf
.PP
The location of a custom \f[C]resolv.conf\f[] file.
This is to allow specifying custom DNS servers and perhaps other name
resolution options, independent of the global operating system
configuration.
.PP
Requires evdns (>= 2.0.3) or c\-ares (>= 1.15.0) backend.
.PP
The parsing of the file is done by the DNS backend library, not
PgBouncer, so see the library\[aq]s documentation for details on allowed
syntax and directives.
.PP
Default: empty (use operating system defaults)
.SH TLS SETTINGS
.SS client_tls_sslmode
.PP
TLS mode to use for connections from clients.
TLS connections are disabled by default.
When enabled, \f[C]client_tls_key_file\f[] and
\f[C]client_tls_cert_file\f[] must be also configured to set up the key
and certificate PgBouncer uses to accept client connections.
.TP
.B disable
Plain TCP.
If client requests TLS, it\[aq]s ignored.
Default.
.RS
.RE
.TP
.B allow
If client requests TLS, it is used.
If not, plain TCP is used.
If the client presents a client certificate, it is not validated.
.RS
.RE
.TP
.B prefer
Same as \f[C]allow\f[].
.RS
.RE
.TP
.B require
Client must use TLS.
If not, the client connection is rejected.
If the client presents a client certificate, it is not validated.
.RS
.RE
.TP
.B verify\-ca
Client must use TLS with valid client certificate.
.RS
.RE
.TP
.B verify\-full
Same as \f[C]verify\-ca\f[].
.RS
.RE
.SS client_tls_key_file
.PP
Private key for PgBouncer to accept client connections.
.PP
Default: not set
.SS client_tls_cert_file
.PP
Certificate for private key.
Clients can validate it.
.PP
Default: not set
.SS client_tls_ca_file
.PP
Root certificate file to validate client certificates.
.PP
Default: not set
.SS client_tls_protocols
.PP
Which TLS protocol versions are allowed.
Allowed values: \f[C]tlsv1.0\f[], \f[C]tlsv1.1\f[], \f[C]tlsv1.2\f[],
\f[C]tlsv1.3\f[].
Shortcuts: \f[C]all\f[] (tlsv1.0,tlsv1.1,tlsv1.2,tlsv1.3),
\f[C]secure\f[] (tlsv1.2,tlsv1.3), \f[C]legacy\f[] (all).
.PP
Default: \f[C]secure\f[]
.SS client_tls_ciphers
.PP
Allowed TLS ciphers, in OpenSSL syntax.
Shortcuts: \f[C]default\f[]/\f[C]secure\f[],
\f[C]compat\f[]/\f[C]legacy\f[], \f[C]insecure\f[]/\f[C]all\f[],
\f[C]normal\f[], \f[C]fast\f[].
.PP
Only connections using TLS version 1.2 and lower are affected.
There is currently no setting that controls the cipher choices used by
TLS version 1.3 connections.
.PP
Default: \f[C]fast\f[]
.SS client_tls_ecdhcurve
.PP
Elliptic Curve name to use for ECDH key exchanges.
.PP
Allowed values: \f[C]none\f[] (DH is disabled), \f[C]auto\f[] (256\-bit
ECDH), curve name.
.PP
Default: \f[C]auto\f[]
.SS client_tls_dheparams
.PP
DHE key exchange type.
.PP
Allowed values: \f[C]none\f[] (DH is disabled), \f[C]auto\f[] (2048\-bit
DH), \f[C]legacy\f[] (1024\-bit DH).
.PP
Default: \f[C]auto\f[]
.SS server_tls_sslmode
.PP
TLS mode to use for connections to PostgreSQL servers.
TLS connections are disabled by default.
.TP
.B disable
Plain TCP.
TCP is not even requested from the server.
Default.
.RS
.RE
.TP
.B allow
FIXME: if server rejects plain, try TLS?
.RS
.RE
.TP
.B prefer
TLS connection is always requested first from PostgreSQL, when refused
connection will be established over plain TCP.
Server certificate is not validated.
.RS
.RE
.TP
.B require
Connection must go over TLS.
If server rejects it, plain TCP is not attempted.
Server certificate is not validated.
.RS
.RE
.TP
.B verify\-ca
Connection must go over TLS and server certificate must be valid
according to \f[C]server_tls_ca_file\f[].
Server host name is not checked against certificate.
.RS
.RE
.TP
.B verify\-full
Connection must go over TLS and server certificate must be valid
according to \f[C]server_tls_ca_file\f[].
Server host name must match certificate information.
.RS
.RE
.SS server_tls_ca_file
.PP
Root certificate file to validate PostgreSQL server certificates.
.PP
Default: not set
.SS server_tls_key_file
.PP
Private key for PgBouncer to authenticate against PostgreSQL server.
.PP
Default: not set
.SS server_tls_cert_file
.PP
Certificate for private key.
PostgreSQL server can validate it.
.PP
Default: not set
.SS server_tls_protocols
.PP
Which TLS protocol versions are allowed.
Allowed values: \f[C]tlsv1.0\f[], \f[C]tlsv1.1\f[], \f[C]tlsv1.2\f[],
\f[C]tlsv1.3\f[].
Shortcuts: \f[C]all\f[] (tlsv1.0,tlsv1.1,tlsv1.2,tlsv1.3),
\f[C]secure\f[] (tlsv1.2,tlsv1.3), \f[C]legacy\f[] (all).
.PP
Default: \f[C]secure\f[]
.SS server_tls_ciphers
.PP
Allowed TLS ciphers, in OpenSSL syntax.
Shortcuts: \f[C]default\f[]/\f[C]secure\f[],
\f[C]compat\f[]/\f[C]legacy\f[], \f[C]insecure\f[]/\f[C]all\f[],
\f[C]normal\f[], \f[C]fast\f[].
.PP
Only connections using TLS version 1.2 and lower are affected.
There is currently no setting that controls the cipher choices used by
TLS version 1.3 connections.
.PP
Default: \f[C]fast\f[]
.SH DANGEROUS TIMEOUTS
.PP
Setting the following timeouts can cause unexpected errors.
.SS query_timeout
.PP
Queries running longer than that are canceled.
This should be used only with slightly smaller server\-side
statement_timeout, to apply only for network problems.
[seconds]
.PP
Default: 0.0 (disabled)
.SS query_wait_timeout
.PP
Maximum time queries are allowed to spend waiting for execution.
If the query is not assigned to a server during that time, the client is
disconnected.
This is used to prevent unresponsive servers from grabbing up
connections.
[seconds]
.PP
It also helps when the server is down or database rejects connections
for any reason.
If this is disabled, clients will be queued indefinitely.
.PP
Default: 120
.SS client_idle_timeout
.PP
Client connections idling longer than this many seconds are closed.
This should be larger than the client\-side connection lifetime
settings, and only used for network problems.
[seconds]
.PP
Default: 0.0 (disabled)
.SS idle_transaction_timeout
.PP
If a client has been in "idle in transaction" state longer, it will be
disconnected.
[seconds]
.PP
Default: 0.0 (disabled)
.SS suspend_timeout
.PP
How many seconds to wait for buffer flush during SUSPEND or reboot
(\-R).
A connection is dropped if the flush does not succeed.
.PP
Default: 10
.SH LOW\-LEVEL NETWORK SETTINGS
.SS pkt_buf
.PP
Internal buffer size for packets.
Affects size of TCP packets sent and general memory usage.
Actual libpq packets can be larger than this, so no need to set it
large.
.PP
Default: 4096
.SS max_packet_size
.PP
Maximum size for PostgreSQL packets that PgBouncer allows through.
One packet is either one query or one result set row.
Full result set can be larger.
.PP
Default: 2147483647
.SS listen_backlog
.PP
Backlog argument for listen(2).
Determines how many new unanswered connection attempts are kept in
queue.
When the queue is full, further new connections are dropped.
.PP
Default: 128
.SS sbuf_loopcnt
.PP
How many times to process data on one connection, before proceeding.
Without this limit, one connection with a big result set can stall
PgBouncer for a long time.
One loop processes one \f[C]pkt_buf\f[] amount of data.
0 means no limit.
.PP
Default: 5
.SS so_reuseport
.PP
Specifies whether to set the socket option \f[C]SO_REUSEPORT\f[] on TCP
listening sockets.
On some operating systems, this allows running multiple PgBouncer
instances on the same host listening on the same port and having the
kernel distribute the connections automatically.
This option is a way to get PgBouncer to use more CPU cores.
(PgBouncer is single\-threaded and uses one CPU core per instance.)
.PP
The behavior in detail depends on the operating system kernel.
As of this writing, this setting has the desired effect on (sufficiently
recent versions of) Linux, DragonFlyBSD, and FreeBSD.
(On FreeBSD, it applies the socket option \f[C]SO_REUSEPORT_LB\f[]
instead.) Some other operating systems support the socket option but it
won\[aq]t have the desired effect: It will allow multiple processes to
bind to the same port but only one of them will get the connections.
See your operating system\[aq]s setsockopt() documentation for details.
.PP
On systems that don\[aq]t support the socket option at all, turning this
setting on will result in an error.
.PP
Each PgBouncer instance on the same host needs different settings for at
least \f[C]unix_socket_dir\f[] and \f[C]pidfile\f[], as well as
\f[C]logfile\f[] if that is used.
Also note that if you make use of this option, you can no longer connect
to a specific PgBouncer instance via TCP/IP, which might have
implications for monitoring and metrics collection.
.PP
Default: 0
.SS tcp_defer_accept
.PP
For details on this and other TCP options, please see
\f[C]man\ 7\ tcp\f[].
.PP
Default: 45 on Linux, otherwise 0
.SS tcp_socket_buffer
.PP
Default: not set
.SS tcp_keepalive
.PP
Turns on basic keepalive with OS defaults.
.PP
On Linux, the system defaults are tcp_keepidle=7200, tcp_keepintvl=75,
tcp_keepcnt=9.
They are probably similar on other operating systems.
.PP
Default: 1
.SS tcp_keepcnt
.PP
Default: not set
.SS tcp_keepidle
.PP
Default: not set
.SS tcp_keepintvl
.PP
Default: not set
.SS tcp_user_timeout
.PP
Sets the \f[C]TCP_USER_TIMEOUT\f[] socket option.
This specifies the maximum amount of time in milliseconds that
transmitted data may remain unacknowledged before the TCP connection is
forcibly closed.
If set to 0, then operating system\[aq]s default is used.
.PP
This is currently only supported on Linux.
.PP
Default: 0
.SH SECTION [DATABASES]
.PP
This contains key=value pairs where the key will be taken as a database
name and the value as a libpq connection string style list of key=value
pairs.
Not all features known from libpq can be used (service=, .pgpass), since
the actual libpq is not used.
.PP
The database name can contain characters \f[C]_0\-9A\-Za\-z\f[] without
quoting.
Names that contain other characters need to be quoted with standard SQL
identifier quoting: double quotes, with "" for a single instance of a
double quote.
.PP
The database name "pgbouncer" is reserved for the admin console and
cannot be used as a key here.
.PP
"*" acts as a fallback database: If the exact name does not exist, its
value is taken as connection string for the requested database.
For example, if there is an entry (and no other overriding entries)
.IP
.nf
\f[C]
*\ =\ host=foo
\f[]
.fi
.PP
then a connection to PgBouncer specifying a database "bar" will
effectively behave as if an entry
.IP
.nf
\f[C]
bar\ =\ host=foo\ dbname=bar
\f[]
.fi
.PP
exists (taking advantage of the default for \f[C]dbname\f[] being the
client\-side database name; see below).
.PP
Such automatically created database entries are cleaned up if they stay
idle longer than the time specified by the \f[C]autodb_idle_timeout\f[]
parameter.
.SS dbname
.PP
Destination database name.
.PP
Default: same as client\-side database name
.SS host
.PP
Host name or IP address to connect to.
Host names are resolved at connection time, the result is cached per
\f[C]dns_max_ttl\f[] parameter.
When a host name\[aq]s resolution changes, existing server connections
are automatically closed when they are released (according to the
pooling mode), and new server connections immediately use the new
resolution.
If DNS returns several results, they are used in round\-robin manner.
.PP
If the value begins with \f[C]/\f[], then a Unix socket in the
file\-system namespace is used.
If the value begins with \f[C]\@\f[], then a Unix socket in the abstract
namespace is used.
.PP
Default: not set, meaning to use a Unix socket
.SS port
.PP
Default: 5432
.SS user
.PP
If \f[C]user=\f[] is set, all connections to the destination database
will be done with the specified user, meaning that there will be only
one pool for this database.
.PP
Otherwise, PgBouncer logs into the destination database with the client
user name, meaning that there will be one pool per user.
.SS password
.PP
If no password is specified here, the password from the
\f[C]auth_file\f[] or \f[C]auth_query\f[] will be used.
.SS auth_user
.PP
Override of the global \f[C]auth_user\f[] setting, if specified.
.SS pool_size
.PP
Set the maximum size of pools for this database.
If not set, the \f[C]default_pool_size\f[] is used.
.SS min_pool_size
.PP
Set the minimum pool size for this database.
If not set, the global \f[C]min_pool_size\f[] is used.
.SS reserve_pool
.PP
Set additional connections for this database.
If not set, \f[C]reserve_pool_size\f[] is used.
.SS connect_query
.PP
Query to be executed after a connection is established, but before
allowing the connection to be used by any clients.
If the query raises errors, they are logged but ignored otherwise.
.SS pool_mode
.PP
Set the pool mode specific to this database.
If not set, the default \f[C]pool_mode\f[] is used.
.SS max_db_connections
.PP
Configure a database\-wide maximum (i.e.
all pools within the database will not have more than this many server
connections).
.SS client_encoding
.PP
Ask specific \f[C]client_encoding\f[] from server.
.SS datestyle
.PP
Ask specific \f[C]datestyle\f[] from server.
.SS timezone
.PP
Ask specific \f[C]timezone\f[] from server.
.SH SECTION [USERS]
.PP
This contains key=value pairs where the key will be taken as a user name
and the value as a libpq connection string style list of key=value pairs
of configuration settings specific for this user.
Only a few settings are available here.
.SS pool_mode
.PP
Set the pool mode to be used for all connections from this user.
If not set, the database or default \f[C]pool_mode\f[] is used.
.SS max_user_connections
.PP
Configure a maximum for the user (i.e.
all pools with the user will not have more than this many server
connections).
.SH INCLUDE DIRECTIVE
.PP
The PgBouncer configuration file can contain include directives, which
specify another configuration file to read and process.
This allows splitting the configuration file into physically separate
parts.
The include directives look like this:
.IP
.nf
\f[C]
%include\ filename
\f[]
.fi
.PP
If the file name is not absolute path it is taken as relative to current
working directory.
.SH AUTHENTICATION FILE FORMAT
.PP
PgBouncer needs its own user database.
The users are loaded from a text file in the following format:
.IP
.nf
\f[C]
"username1"\ "password"\ ...
"username2"\ "md5abcdef012342345"\ ...
"username2"\ "SCRAM\-SHA\-256$<iterations>:<salt>$<storedkey>:<serverkey>"
\f[]
.fi
.PP
There should be at least 2 fields, surrounded by double quotes.
The first field is the user name and the second is either a plain\-text,
a MD5\-hashed password, or a SCRAM secret.
PgBouncer ignores the rest of the line.
Double quotes in a field value can be escaped by writing two double
quotes.
.PP
PostgreSQL MD5\-hashed password format:
.IP
.nf
\f[C]
"md5"\ +\ md5(password\ +\ username)
\f[]
.fi
.PP
So user \f[C]admin\f[] with password \f[C]1234\f[] will have MD5\-hashed
password \f[C]md545f2603610af569b6155c45067268c6b\f[].
.PP
PostgreSQL SCRAM secret format:
.IP
.nf
\f[C]
SCRAM\-SHA\-256$<iterations>:<salt>$<storedkey>:<serverkey>
\f[]
.fi
.PP
See the PostgreSQL documentation and RFC 5803 for details on this.
.PP
The passwords or secrets stored in the authentication file serve two
purposes.
First, they are used to verify the passwords of incoming client
connections, if a password\-based authentication method is configured.
Second, they are used as the passwords for outgoing connections to the
backend server, if the backend server requires password\-based
authentication (unless the password is specified directly in the
database\[aq]s connection string).
The latter works if the password is stored in plain text or MD5\-hashed.
SCRAM secrets can only be used for logging into a server if the client
authentication also uses SCRAM, the PgBouncer database definition does
not specify a user name, and the SCRAM secrets are identical in
PgBouncer and the PostgreSQL server (same salt and iterations, not
merely the same password).
This is due to an inherent security property of SCRAM: The stored SCRAM
secret cannot by itself be used for deriving login credentials.
.PP
The authentication file can be written by hand, but it\[aq]s also useful
to generate it from some other list of users and passwords.
See \f[C]\&./etc/mkauth.py\f[] for a sample script to generate the
authentication file from the \f[C]pg_shadow\f[] system table.
Alternatively, use \f[C]auth_query\f[] instead of \f[C]auth_file\f[] to
avoid having to maintain a separate authentication file.
.SH HBA FILE FORMAT
.PP
It follows the format of the PostgreSQL \f[C]pg_hba.conf\f[] file (see
<https://www.postgresql.org/docs/current/auth-pg-hba-conf.html>).
.IP \[bu] 2
Supported record types: \f[C]local\f[], \f[C]host\f[], \f[C]hostssl\f[],
\f[C]hostnossl\f[].
.IP \[bu] 2
Database field: Supports \f[C]all\f[], \f[C]sameuser\f[],
\f[C]\@file\f[], multiple names.
Not supported: \f[C]replication\f[], \f[C]samerole\f[],
\f[C]samegroup\f[].
.IP \[bu] 2
User name field: Supports \f[C]all\f[], \f[C]\@file\f[], multiple names.
Not supported: \f[C]+groupname\f[].
.IP \[bu] 2
Address field: Supports IPv4, IPv6.
Not supported: DNS names, domain prefixes.
.IP \[bu] 2
Auth\-method field: Only methods supported by PgBouncer\[aq]s
\f[C]auth_type\f[] are supported, except \f[C]any\f[] and \f[C]pam\f[],
which only work globally.
User name map (\f[C]map=\f[]) parameter is not supported.
.SH EXAMPLE
.PP
Minimal config:
.IP
.nf
\f[C]
[databases]
template1\ =\ host=localhost\ dbname=template1\ auth_user=someuser

[pgbouncer]
pool_mode\ =\ session
listen_port\ =\ 6432
listen_addr\ =\ localhost
auth_type\ =\ md5
auth_file\ =\ users.txt
logfile\ =\ pgbouncer.log
pidfile\ =\ pgbouncer.pid
admin_users\ =\ someuser
stats_users\ =\ stat_collector
\f[]
.fi
.PP
Database defaults:
.IP
.nf
\f[C]
[databases]

;\ foodb\ over\ Unix\ socket
foodb\ =

;\ redirect\ bardb\ to\ bazdb\ on\ localhost
bardb\ =\ host=localhost\ dbname=bazdb

;\ access\ to\ destination\ database\ will\ go\ with\ single\ user
forcedb\ =\ host=localhost\ port=300\ user=baz\ password=foo\ client_encoding=UNICODE\ datestyle=ISO
\f[]
.fi
.PP
Example of a secure function for \f[C]auth_query\f[]:
.IP
.nf
\f[C]
CREATE\ OR\ REPLACE\ FUNCTION\ pgbouncer.user_lookup(in\ i_username\ text,\ out\ uname\ text,\ out\ phash\ text)
RETURNS\ record\ AS\ $$
BEGIN
\ \ \ \ SELECT\ usename,\ passwd\ FROM\ pg_catalog.pg_shadow
\ \ \ \ WHERE\ usename\ =\ i_username\ INTO\ uname,\ phash;
\ \ \ \ RETURN;
END;
$$\ LANGUAGE\ plpgsql\ SECURITY\ DEFINER;
REVOKE\ ALL\ ON\ FUNCTION\ pgbouncer.user_lookup(text)\ FROM\ public,\ pgbouncer;
GRANT\ EXECUTE\ ON\ FUNCTION\ pgbouncer.user_lookup(text)\ TO\ pgbouncer;
\f[]
.fi
.SH SEE ALSO
.PP
pgbouncer(1) \- man page for general usage, console commands
.PP
<https://www.pgbouncer.org/>
